<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TraceCore</name>
    </assembly>
    <members>
        <member name="T:TraceCore.Architecture.Core.IAppCore">
            <summary>
            Интерфейс ядра программы. Одновременно работающих ядер может быть сколько угодно.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.IAppCore.Start">
            <summary>
            Вызывается при инициализации ядра и обеспечивает запуск внутренней инфраструктуры.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.IAppCore.Stop">
            <summary>
            Вызывается при остановке ядра.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3">
            <summary>
            Ядро модульной архитектуры.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent">
            <summary>
            Представляет общий интерфейс компонента ядра. Это может быть фабрика, модуль, что угодно, но все компоненты должны обрабатываться по общему принципу - вызов <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/> при создании компонента и вызов <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Stop"/> при остановке/удалении компонента.
            Может существовать множество экземпляров компонента в ядре.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)">
            <summary>
            Вызывается при инициализации компонента.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Stop">
            <summary>
            Вызывается при остановке/удалении компонента.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.GetState">
            <summary>
            Возвращает текущее состояние компонента ядра.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.GetAppCore">
            <summary>
            Возвращает объект ядра, к которому привязан компонент.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentSingleton">
            <summary>
            Представляет общий интерфейс компонента ядра, для которого в ядре может существовать только один экземпляр.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentMultipe">
            <summary>
            Представляет общий интерфейс компонента ядра, для которого в ядре может существовать множество экземпляров.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory">
            <summary>
            Представляет фабрику компонентов ядра. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.IsSupported``1">
            <summary>
            Возвращает true, если данная фабрика компонентов ядра может вернуть компонент ядра на базе интерфейса <typeparamref name="TCoreComponent"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.Create``1">
            <summary>
            Вызывается, когда необходимо вернуть новый экземпляр компонента ядра, реализующий интерфейс <typeparamref name="TCoreComponent"/>.
            </summary>
            <returns>Возвращает объект компонента ядра или null, если объект не был найден. Если возвращает null, то ядро обращается к следующей фабрике по списку.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Start">
            <summary>
            Старт ядра, запуск всех компонентов ядра, помеченных атрибутом <see cref="T:TraceCore.Architecture.Core.Modular.ImmediateStartAttribute"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Stop">
            <summary>
            Остановка ядра, остановка всех компонентов ядра.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Get``1">
            <summary>
            Возвращает синглтон компонента ядра, реализующий интерфейс <typeparamref name="TCoreComponent"/>. Ядро самостоятельно не занимается созданием компонентов и обращается к семейству фабрик <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>.
            Поиск компонента производится в фабриках, реализующих интерфейс <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>, в порядке свойства <see cref="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool"/> по возрастанию.
            </summary>
            <returns>Возвращает объект компонента ядра или null, если компонент ядра не был найден.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Get``1(System.Action{``0})">
            <summary>
            Возвращает синглтон компонента ядра, реализующий интерфейс <typeparamref name="TCoreComponent"/>. Ядро самостоятельно не занимается созданием компонентов и обращается к семейству фабрик <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>.
            Поиск компонента производится в фабриках, реализующих интерфейс <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>, в порядке свойства <see cref="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool"/> по возрастанию.
            </summary>
            <param name="onGetAction">Метод, вызываемый перед возвратом компонента, полученного из семейства фабрик. Может быть null.</param>
            <returns>Возвращает объект компонента ядра или null, если компонент ядра не был найден.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.OnGet``1(``0)">
            <summary>
            Вызывается каждый раз, когда ядро возвращает синглтон компонента ядра при вызове <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.Get``1" />/<see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.Get``1(System.Action{``0})"/>. Может использоваться для дополнительной фильтрации возвращаемых компонентов.
            </summary>
            <returns>В базовой реализации просто возвращает переданный компонент ядра.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Create``1">
            <summary>
            Возвращает новый экземпляр компонента ядра, реализующий интерфейс <typeparamref name="TCoreComponent"/>. Ядро самостоятельно не занимается созданием компонентов и обращается к семейству фабрик <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>.
            Поиск компонента производится в фабриках, реализующих интерфейс <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>, в порядке свойства <see cref="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool"/> по возрастанию.
            </summary>
            <returns>Возвращает объект компонента ядра или null, если компонент ядра не был найден.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Create``1(System.Action{``0})">
            <summary>
            Возвращает новый экземпляр компонента ядра, реализующий интерфейс <typeparamref name="TCoreComponent"/>. Ядро самостоятельно не занимается созданием компонентов и обращается к семейству фабрик <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>.
            Поиск компонента производится в фабриках, реализующих интерфейс <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory"/>, в порядке свойства <see cref="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool"/> по возрастанию.
            </summary>
            <param name="onCreateAction">Метод, вызываемый перед возвратом компонента, полученного из семейства фабрик. Может быть null.</param>
            <returns>Возвращает объект компонента ядра или null, если компонент ядра не был найден.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.OnCreate``1(``0)">
            <summary>
            Вызывается каждый раз, когда ядро возвращает новый экземпляр компонента ядра при вызове <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.Create``1" />/<see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.Create``1(System.Action{``0})"/>. Может использоваться для дополнительной фильтрации возвращаемых компонентов.
            </summary>
            <returns>В базовой реализации просто возвращает переданный компонент ядра.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.Attach``1(``0)">
            <summary>
            Присоединяет компонент <paramref name="component"/> к ядру и запускает его (<see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/>). 
            Присоединить можно только не присоединенный к другому ядру компонент, в противном случае будет сгенерировано исключение.
            </summary>
            <exception cref="T:System.ArgumentNullException">Генерируется, если <paramref name="component"/> равен null.</exception>
            <exception cref="T:System.InvalidOperationException">Генерируется, если компонент уже присоединен к другому ядру.</exception>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.TryAttach``1(``0)">
            <summary>
            Пытается присоединить компонент <paramref name="component"/> к ядру и запустить его (<see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/>). 
            Присоединить можно только не присоединенный к другому ядру компонент, в противном случае будет возвращено значение false.
            </summary>
            <returns>Возвращает false, если <paramref name="component"/> равен null или компонент уже присоединен к другому ядру.</returns>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.OnStart">
            <summary>
            Вызывается при запуске ядра.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.OnStop">
            <summary>
            Вызывается при остановке ядра. Остановка может быть вызвана как прямым вызовом <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.Stop"/>, так и через использование <see cref="M:System.IDisposable.Dispose"/>. 
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.CoreComponentBase">
            <summary>
            Базовая реализация компонента ядра.
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.Core.Modular.AppCore`3.CoreComponentBase.AppCore">
            <summary>
            Объект ядра приложения, к которому относится компонент.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.CoreComponentBase.OnStart">
            <summary>
            Вызывается при запуске компонента. См. также <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.CoreComponentBase.OnStop">
            <summary>
            Вызывается при остановке компонента, либо при вызове Dispose. Вызывается всего один раз. Все ресурсы должны освобождаться именно в этом методе. См. также <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Stop"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.DefaultModuleFactory">
            <summary>
            Фабрика компонентов ядра по-умолчанию. 
            Если ни одна другая фабрика не вернула нужный компонент, то данная фабрика перебирает все сборки, загруженные в домен приложения и ищет любой тип, реализующий указанный интерфейс, с открытым беспараметрическим конструктором.
            Для корректной работы перед вызовом <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.Create``1"/> должен быть вызван <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.IsSupported``1"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.DefaultModuleFactory.OnIsSupported``1">
            <summary>
            См. <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnIsSupported``1"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.DefaultModuleFactory.OnCreate``1">
            <summary>
            См. <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnCreate``1"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.Core.Modular.AppCore`3.DefaultModuleFactory.OrderInPool">
            <summary>
            См. <see cref="P:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OrderInPool"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase">
            <summary>
            Базовая реализация фабрики компонентов ядра для переиспользования кода.
            Умеет автоматически запускать компоненты, возвращенные методом <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnCreate``1"/>, и останавливать компоненты при остановке фабрики.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStart">
            <summary>
            Запускается при запуске фабрики. Запечатанный метод, для определения своего поведения используйте <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStartFactory"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStop">
            <summary>
            Запускается при остановке фабрики. Запечатанный метод, для определения своего поведения используйте <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStopFactory"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStartFactory">
            <summary>
            Вызывается при запуске фабрики.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnStopFactory">
            <summary>
            Вызывается при остановке фабрики после остановки всех компонентов.
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OrderInPool">
            <summary>
            Порядок расположения фабрики в списке фабрик ядра. При поиске компонентов фабрики обрабатываются по возрастанию порядка в списке фабрик ядра.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnIsSupported``1">
            <summary>
            Вызывается, когда необходимо определить, может ли данная фабрика вернуть компонент на базе интерфейса <typeparamref name="TCoreComponentRequested"/>. См. также <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.IsSupported``1"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.AppCore`3.ModuleFactoryBase.OnCreate``1">
            <summary>
            Вызывается, когда необходимо вернуть новый экземпляр компонента ядра, реализующего интерфейс <typeparamref name="TCoreComponentRequested"/>. См. также <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponentFactory.Create``1"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.Base.CoreComponentState">
            <summary>
            Описывает состояние компонента ядра.
            </summary>
        </member>
        <member name="F:TraceCore.Architecture.Core.Modular.Base.CoreComponentState.None">
            <summary>
            Компонент не запущен (метод <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/> не вызывался).
            </summary>
        </member>
        <member name="F:TraceCore.Architecture.Core.Modular.Base.CoreComponentState.Started">
            <summary>
            Компонент запущен (метод <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Start(`0)"/> был вызван).
            </summary>
        </member>
        <member name="F:TraceCore.Architecture.Core.Modular.Base.CoreComponentState.Stopped">
            <summary>
            Компонент остановлен (метод <see cref="M:TraceCore.Architecture.Core.Modular.AppCore`3.ICoreComponent.Stop"/> был вызван).
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute">
            <summary>
            Указывает, какой тип объектов поддерживается фабрикой. Может быть указано несколько таких атрибутов - на каждый поддерживаемый тип.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute.#ctor(System.Type)">
            <summary>
            Указывает, какой тип объектов поддерживается фабрикой. Может быть указано несколько таких атрибутов - на каждый поддерживаемый тип.
            </summary>
            <param name="supportedType">Тип объектов, поддерживаемый фабрикой.</param>
        </member>
        <member name="P:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute.SupportedType">
            <summary>
            Тип объектов, поддерживаемый фабрикой.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute.GetValuesFromType(System.Type,System.Boolean)">
            <summary>
            Возвращает список значений <see cref="P:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute.SupportedType"/> из атрибутов, назначенных типу <paramref name="type"/> и (если <paramref name="inherit"/> равен true) его базовых типов.
            </summary>
            <param name="type">Тип, для которого необходимо получить список значений из назначенных атрибутов <see cref="T:TraceCore.Architecture.Core.Modular.Base.FactorySupportedTypeAttribute"/>.</param>
            <param name="inherit">Определяет необходимость поиска цепочки наследования этого элемента для поиска атрибутов</param>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.ImmediateStartAttribute">
            <summary>
            Модуль, интерфейс которого помечен данным атрибутом, загружается автоматически при старте ядра <see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.Core.Modular.IModule">
            <summary>
            Представляет отдельный модуль. С точки зрения правильного проектирования реализация типа, построенного на данном интерфейсе, должна следовать шаблону "Фасад".
            </summary>
            <remarks>
            <para>Про автоматический запуск модуля см. <see cref="T:TraceCore.Architecture.Core.Modular.ImmediateStartAttribute"/>.</para>
            </remarks>
        </member>
        <member name="T:TraceCore.Architecture.FOM.IObjectManipulator`1">
            <summary>
            Общий интерфейс манипулятора объектами типа <typeparamref name="T"/>. Может выполнять любые операции с уже СУЩЕСТВУЮЩИМИ объектами. Созданием и получением НОВЫХ объектов занимается фабрика соответствующих объектов (см. <see cref="T:TraceCore.Architecture.FOM.IObjectFactory`1"/>). 
            <para>См. также описание модели в примере <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleModel"/>.</para>
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.FOM.IObjectFactory`1">
            <summary>
            Общий интерфейс фабриики объектов типа <typeparamref name="T"/>. Должен выполнять только операции получения и создания объектов, то есть Create/Get. Для выполнения всех остальных операций (сохранение, удаление, всё остальное) должен существовать манипулятор (см. <see cref="T:TraceCore.Architecture.FOM.IObjectManipulator`1"/>).
            <para>См. также описание модели в примере <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleModel"/>.</para>
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.FOM.SampleModel.SampleModel">
            <summary>
            Пример модели логики. Паттерн FOM (Factory-Object-Manipulator) подразумевает сведение всей бизнес-логики к блокам "Фабрика объектов - объект - манипулятор объектом".
            <para>Фабрика объектов - фабрика отвечает за создание новых и получение готовых объектов определенных типов (см. <see cref="T:TraceCore.Architecture.FOM.IObjectFactory`1"/>). Может существовать семейство фабрик объектов определенного типа, в зависимости от реализации логики внутри блока.</para>
            <para>Объект - объект модели, хранящий данные, но не выполняющий самостоятельно никаких действий.</para>
            <para>Манипулятор - манипулятор выполняет все действия с объектом определенного типа (см. <see cref="T:TraceCore.Architecture.FOM.IObjectManipulator`1"/>), подразумеваемые логикой модели. Может существовать семейство манипуляторов объектами определенного типа, в зависимости от реализации логики внутри блока.</para>
            <para>Блоки FOM необязательно должны быть сведены к классам типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleModel"/>. 
            В зависимости от реализации, это могут быть пулы всех фабрик и всех манипуляторов, либо модули в модульной архитектуре. 
            Часть логики может существовать внутри классов типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleModel"/> (как в примере <see cref="M:TraceCore.Architecture.FOM.SampleModel.Example1.Run"/>), так и вынесена вовне (как в примере <see cref="M:TraceCore.Architecture.FOM.SampleModel.Example2.Run"/>, в зависимости от организации архитектуры приложения.</para>
            <para>Блоки FOM могут включать в себя другие блоки или объекты из блоков и манипулировать ими с помощью соответствующих манипуляторов. Логика строится на вложенности блоков и манипулировании объектами нижнего уровня.</para>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.FOM.SampleModel.SampleModel.CreateFactory">
            <summary>
            Создает новый или возвращает существующий экземпляр фабрики объектов <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.FOM.SampleModel.SampleModel.CreateManipulator">
            <summary>
            Создает новый или возвращает существующий экземпляр манипулятора объектами <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.FOM.SampleModel.SampleModel.WriteIntoLogs">
            <summary>
            Создает новый экземпляр объекта <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/> и выводит информацию в логи.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.FOM.SampleModel.ISampleObjectManipulator">
            <summary>
            Пример интерфейса манипулятора объектами типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.FOM.SampleModel.ISampleObjectManipulator.WriteIntoLogs(TraceCore.Architecture.FOM.SampleModel.SampleObject)">
            <summary>
            Записывает в лог информацию о переданном объекте.
            </summary>
            <param name="obj">Объект, информацию о котором следует записать. Не может быть null.</param>
            <exception cref="T:System.ArgumentNullException">Возникает, если значение <paramref name="obj"/> равно null.</exception>
        </member>
        <member name="T:TraceCore.Architecture.FOM.SampleModel.SampleObjectManipulator">
            <summary>
            Реализация манипулятора объектами типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.FOM.SampleModel.ISampleObjectFactory">
            <summary>
            Пример интерфейса фабрики объектов типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.FOM.SampleModel.ISampleObjectFactory.CreateEmpty">
            <summary>
            Создает и возвращает пустой экземпляр объекта.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.FOM.SampleModel.SampleObjectFactory">
            <summary>
            Реализация фабрики объектов типа <see cref="T:TraceCore.Architecture.FOM.SampleModel.SampleObject"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.InterfaceMapper.InterfaceReflectedMemberAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.InterfaceReflectedMemberAttribute.#ctor(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.InterfaceMapper.InterfaceReflectedMemberAttribute.MemberSignature">
            <summary>
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.InterfaceMapper.InterfaceReflectedMemberAttribute.MemberTypeFullName">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.InterfaceMapper.MapperBase">
            <summary>
            В разработке.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.PrepareMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPrepareMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Вызывается, когда необходимо обработать вызов метода прокси-класса, реализующий метод <paramref name="method"/> интерфейса. 
            </summary>
            <param name="method">Вызванный метод интерфейса.</param>
            <param name="arguments">Список аргументов, переданных при вызове метода интерфейса.</param>
            <returns>Если тип возвращаемого значения метода равен <see cref="T:System.Void"/>, то возвращаемое значение не играет роли и не учитывается. Во всех остальных случаях необходимо вернуть значение, которое может быть приведено к типу возвращаемого значения метода <see cref="P:System.Reflection.MethodInfo.ReturnType"/>.</returns>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.PreparePropertyGet(System.Reflection.PropertyInfo)">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPreparePropertyGet(System.Reflection.PropertyInfo)">
            <summary>
            Вызывается, когда необходимо обработать вызов метода GET для свойства прокси-класса, реализующего метод GET свойства <paramref name="property"/> интерфейса. 
            </summary>
            <param name="property">Свойство интерфейса, для которого необходимо получить значение.</param>
            <returns>Необходимо вернуть значение, которое может быть приведено к типу возвращаемого значения свойства <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>.</returns>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.PreparePropertySet(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPreparePropertySet(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Вызывается, когда необходимо обработать вызов метода SET для свойства прокси-класса, реализующего метод SET свойства <paramref name="property"/> интерфейса. 
            </summary>
            <param name="property">Свойство интерфейса, для которого необходимо задать значение.</param>
            <param name="value">Новое значение свойства интерфейса.</param>
        </member>
        <member name="T:TraceCore.Architecture.InterfaceMapper.Mapper">
            <summary>
            Предоставляет возможность генерации маппера для перехвата обращения к методам и свойствам интерфейсов. Может быть использовано, например, для генерации прозрачного прокси.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.Mapper.CreateObjectFromInterface``2">
            <summary>
            Создает
            </summary>
            <typeparam name="TMapper"></typeparam>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Architecture.InterfaceMapper.Mapper.CreateTypeFromInterface``2">
            <summary>
            Генерирует новый или возвращает ранее сконструированный тип на базе типа <typeparamref name="TMapper"/>, наследующий и реализующий методы интерфейса <typeparamref name="TInterface"/>. 
            Обращение к свойствам и методам объекта через интерфейса на основе сконструированного типа должно обрабатываться в <see cref="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPrepareMethodCall(System.Reflection.MethodInfo,System.Object[])"/> / <see cref="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPreparePropertyGet(System.Reflection.PropertyInfo)"/> / <see cref="M:TraceCore.Architecture.InterfaceMapper.MapperBase.OnPreparePropertySet(System.Reflection.PropertyInfo,System.Object)"/>.
            <para>После создания сконструированный тип сопоставляется паре <typeparamref name="TMapper"/>-<typeparamref name="TInterface"/> и повторно возвращается при последующих вызовах данной пары.</para>
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.ObjectPool.ObjectPool`1">
            <summary>
            Представляет пул объектов, реализующих интерфейс <typeparamref name="TPoolObject"/>.
            <para>При первичной инициализации (первое обращение к <see cref="P:TraceCore.Architecture.ObjectPool.ObjectPool`1.ObjectList"/> с isLazyInitialization=true или вызов конструктора с isLazyInitialization=false) пул перебирает все сборки, 
            загруженные в текущий домен приложения, и создает экземпляры всех найденных типов, реализующих интерфейс <typeparamref name="TPoolObject"/>, и подписывается на событие <see cref="E:System.AppDomain.AssemblyLoad"/>, 
            повторяя процесс поиска подходящих типов для каждой новой сборки, загруженной в домен приложения.
            </para>
            <para>При создании экземпляра пул обращается к методу <see cref="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.OnCreatePoolObject``1(System.Boolean@)"/>, запрашивая экземпляр типа TPoolObjectConcrete, реализующего интерфейс <typeparamref name="TPoolObject"/>. Для подробностей см. описание метода.</para>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.#ctor(System.Boolean)">
            <summary>
            Инициализация пула объектов с указанием режима инициализации списка объектов (ленивая или в конструкторе).
            </summary>
            <param name="isLazyInitialization">Указывает, как именно следует инициализировать список объектов - во время первого обращения к <see cref="P:TraceCore.Architecture.ObjectPool.ObjectPool`1.ObjectList"/> (true) или непосредственно в конструкторе (false).</param>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.UpdateObjectsListOnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Этот метод вызывается при загрузке новой сборки в домен приложения и добавляет новые объекты на основании подходящих типов из загруженной сборки в список, но только в том случае, когда список уже загружен, чтобы не делать двойную работу.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.OnInit">
            <summary>
            Вызывается при инициализации пула объектов.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.OnUpdateObjectsList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Вызывается после обновления списка объектов. 
            <para>Вызывается в нескольких случаях:</para>
            <para>1) Первый раз вызывается после первичной загрузки списка объектов после инициализации свойства <see cref="P:TraceCore.Architecture.ObjectPool.ObjectPool`1.ObjectList"/>.</para>
            <para>2) Вызывается после загрузки новых сборок в домен приложения, если в сборке были обнаружены новые подходящие типы объектов.</para>
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.OnCreatePoolObject``1(System.Boolean@)">
            <summary>
            Вызывается, когда необходимо создать экземпляр объекта указанного типа.
            </summary>
            <typeparam name="TFactoryConcrete">Тип объекта, который необходимо создать.</typeparam>
            <param name="handled">Должно быть установлено в true, если указанный тип <typeparamref name="TFactoryConcrete"/> был обработан в методе. В противном случае будет предпринята попытка создать новый экземпляр типа <typeparamref name="TFactoryConcrete"/>, если для него имеется открытый беспараметрический конструктор. Если такого конструктора нет, то данный тип объекта будет пропущен.</param>
            <returns>Возвращает новый объект или null.</returns>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.OnDispose">
            <summary>
            Вызывается при уничтожении пула объектов.
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.ObjectPool.ObjectPool`1.ObjectList">
            <summary>
            Возвращает список объектов, инициализированных пулом.
            Момент инициализации списка зависит от типа инициализации, переданного в конструктор <see cref="M:TraceCore.Architecture.ObjectPool.ObjectPool`1.#ctor(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.ObjectPool.IPoolObject">
            <summary>
            Представляет объект, помещаемый в пул объектов <see cref="T:TraceCore.Architecture.ObjectPool.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered">
            <summary>
            Представляет объект в сортируемом пуле <see cref="T:TraceCore.Architecture.ObjectPool.ObjectPool`1"/>, где TPoolObject объявлен на базе <see cref="T:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool">
            <summary>
            Желаемый порядковый номер в пуле, возвращаемый объектом. Пул объектов сортирует список на основе порядковых номеров объектов по возрастанию.
            </summary>
        </member>
        <member name="T:TraceCore.Architecture.ObjectPool.IPoolObjectInit">
            <summary>
            Представляет объект, помещаемый в пул объектов <see cref="T:TraceCore.Architecture.ObjectPool.ObjectPool`1"/>, с дополнительным методом инициализации, вызываемым пулом при инициализации объекта.
            </summary>
        </member>
        <member name="M:TraceCore.Architecture.ObjectPool.IPoolObjectInit.Init">
            <summary>
            Метод, вызываемый при инициализации объекта.
            </summary>
        </member>
        <member name="T:TraceCore.Factory.ProvidersFactoryStartup`2">
            <summary>
            Представляет фабрику провайдеров типа <typeparamref name="TProviderInterface"/> на основе шаблона ссылающегося на себя (self-referencing generic) паттерна Singleton с инициализацией при старте приложения.
            Во время загрузки сборки TraceCore инициализируются все классы, наследуемые от <see cref="T:TraceCore.Factory.ProvidersFactoryStartup`2"/> и присваиваются значения всем свойствам Instance.
            </summary>
            <typeparam name="TProviderInterface">Тип провайдеров, обрабатываемых фабрикой. Должен быть интерфейсом.</typeparam>
            <typeparam name="TFactoryType">См. <see cref="T:TraceCore.Factory.SingletonBase`1"/>.</typeparam>
        </member>
        <member name="M:TraceCore.Factory.ProvidersFactoryStartup`2.#ctor(System.Boolean)">
            <summary>
            Инициализация фабрики с указанием режима инициализации провайдеров (ленивая или в конструкторе).
            </summary>
            <param name="isLazyProvidersInitialization">Указывает, как именно следует инициализировать провайдеры - во время первого обращения к <see cref="P:TraceCore.Factory.ProvidersFactoryStartup`2.Providers"/> (true) или непосредственно в конструкторе (false).</param>
        </member>
        <member name="M:TraceCore.Factory.ProvidersFactoryStartup`2.UpdateProvidersOnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Этот метод вызывается при загрузке новой сборки в домен приложения и добавляет новые провайдеры из загруженной сборки в список, но только в том случае, когда список уже загружен, чтобы не делать двойную работу.
            </summary>
        </member>
        <member name="M:TraceCore.Factory.ProvidersFactoryStartup`2.Init">
            <summary>
            Вызывается при инициализации фабрики.
            </summary>
        </member>
        <member name="M:TraceCore.Factory.ProvidersFactoryStartup`2.UpdateProviders">
            <summary>
            Вызывается после обновления списка провайдеров. 
            <para>Вызывается в нескольких случаях:</para>
            <para>1) Первый раз вызывается после первичной загрузки списка провайдеров после инициализации свойства <see cref="P:TraceCore.Factory.ProvidersFactoryStartup`2.Providers"/>.</para>
            <para>2) Вызывается после загрузки новых сборок в домен приложения, если в сборке были обнаружены новые подходящие провайдеры.</para>
            </summary>
        </member>
        <member name="M:TraceCore.Factory.ProvidersFactoryStartup`2.Dispose">
            <summary>
            См. <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Factory.ProvidersFactoryStartup`2.Providers">
            <summary>
            Возвращает список провайдеров, инициализированных фабрикой.
            Момент инициализации провайдеров зависит от типа инициализации, переданного в конструктор <see cref="M:TraceCore.Factory.ProvidersFactoryStartup`2.#ctor(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Factory.SingletonBase`1">
            <summary>
            Представляет шаблон ссылающегося на себя (self-referencing generic) паттерна Singleton.
            Если класс, например, A, наследуется от SingletonBase, то объявление должно выглядеть так: 
            class A : SingletonBase&gt;A>&lt;
            {
            }
            </summary>
            <typeparam name="TFactoryType">Ссылка на тип, наследующий <see cref="T:TraceCore.Factory.SingletonBase`1"/>.</typeparam>
        </member>
        <member name="P:TraceCore.Factory.SingletonBase`1.Instance">
            <summary>
            Возвращает экземпляр целевого типа <typeparamref name="TFactoryType"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Factory.SingletonBaseStartup`1">
            <summary>
            Представляет шаблон ссылающегося на себя (self-referencing generic) паттерна Singleton с инициализацией при старте приложения.
            Во время загрузки сборки TraceCore инициализируются все классы, наследуемые от <see cref="T:TraceCore.Factory.SingletonBaseStartup`1"/> и присваиваются значения всем свойствам Instance.
            </summary>
            <typeparam name="TFactoryType">См. <see cref="T:TraceCore.Factory.SingletonBase`1"/>.</typeparam>
        </member>
        <member name="M:TraceCore.Factory.SingletonBaseStartup`1.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Factory.SingletonBaseStartup`1.Init">
            <summary>
            См. <see cref="M:TraceCore.Architecture.ObjectPool.IPoolObjectInit.Init"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Factory.SingletonBaseStartup`1.Dispose">
            <summary>
            См. <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Factory.SingletonBaseStartup`1.OrderInPool">
            <summary>
            См. <see cref="P:TraceCore.Architecture.ObjectPool.IPoolObjectOrdered.OrderInPool"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Global">
            <summary>
            </summary>
        </member>
        <member name="P:TraceCore.Global.CheckIfExcludeFromAssemblyWatching">
            <summary>
            Свойство используется в фабрике модулей по-умолчанию для модульных ядер (<see cref="T:TraceCore.Architecture.Core.Modular.AppCore`3"/>), в пуле объектов <see cref="T:TraceCore.Architecture.ObjectPool.ObjectPool`1"/>,
            в статическом провайдере <see cref="T:TraceCore.Factory.ProvidersFactoryStartup`2"/> и при запуске приложения в <see cref="T:TraceCore.Startup.StartupFactory"/> для 
            определения провайдеров <see cref="T:TraceCore.Factory.ProvidersFactoryStartup`2"/> для запуска.<para />
            Присвоенный метод должен возвращать true для сборок, которые необходимо игнорировать при обходе всех типов в сборке.
            </summary>
        </member>
        <member name="T:TraceCore.Items.IItemBase">
            <summary>
            Представляет базовую сущность и некоторый набор методов и виртуальных свойств, используемых во многих расширениях и частях движка.
            Поддерживает атрибут <see cref="T:TraceCore.Items.ConstructorInitializerAttribute"/> для методов класса. 
            </summary>
        </member>
        <member name="P:TraceCore.Items.IItemBase.ID">
            <summary>
            Возвращает идентификатор объекта.
            </summary>
        </member>
        <member name="P:TraceCore.Items.IItemBase.Caption">
            <summary>
            Возвращает название (заголовок) объекта.
            </summary>
        </member>
        <member name="P:TraceCore.Items.IItemBase.DateChangeBase">
            <summary>
            Возвращает и задает дату последнего изменения объекта, если поддерживается классом-потомком.
            </summary>
        </member>
        <member name="P:TraceCore.Items.IItemBase.Owner">
            <summary>
            Владелец объекта. Может быть пустым.
            Привязка к владельцу важна для работы некоторых методов и некоторого функционала движка.
            </summary>
        </member>
        <member name="T:TraceCore.Items.MethodMarkCallerAttribute">
            <summary>
            Указывает, что метод, помеченный атрибутом, должен быть вызван в конструкторе класса. 
            Метод не должен иметь входных параметров и не должен возвращать значение (т.е. <see cref="T:System.Action"/>).
            Поддерживается в ItemBase.
            </summary>
        </member>
        <member name="M:TraceCore.Items.MethodMarkCallerAttribute.CallMethodsInObject``1(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Items.ConstructorInitializerAttribute">
            <summary>
            Описывает метод, выполняемый в конструкторе типа.
            </summary>
        </member>
        <member name="T:TraceCore.Items.SavedInContextEventAttribute">
            <summary>
            Представляет метод, выполняемый при вызове <see cref="M:TraceCore.Data.IDataContext.SaveChanges"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Reflection.LibraryEnumerator.CheckPreparedAssemblyAndAdd(System.Reflection.AssemblyName)">
            <summary>
            Возвращает true, если эта сборка уже была обработана. Для сборок с публичным ключом обрабатывает только одну версию сборки.
            </summary>
        </member>
        <member name="T:TraceCore.LibraryEnumeratorFactory">
            <summary>
            Предоставляет перечислитель для перебора всех связанных с приложением сборок для выполнения каких-либо действий в callback-методе.
            Перебирает ВСЕ возможные сборки: 
            1) Загруженные в домене приложения;
            2) Все связанные сборки;
            3) Сборки, прикрепленные через Costura.Fody;
            4) Сборки в папке приложения (см. <see cref="P:TraceCore.LibraryEnumeratorFactory.LibraryDirectory"/>).
            
            Процесс перебора и загрузки выглядит следующим образом:
            1) Получение всех загруженных сборок из домена приложения (<see cref="M:System.AppDomain.GetAssemblies"/>) и передача списка сборок в шаг 2;
            2) Обработка списка переданных сборок:
            2.1) Проверяется, следует ли игнорировать эту сборку в перечислителе (определенный список сборок некоторых расширений, также игнорируется VisualStudio DesignTime, вызов <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/>). Если сборка НЕ игнорируется, то переход в шаг 2.2, в противном случае к следующей сборке в списке;
            2.2) Для сборки выполняется загрузка в домен приложения (<see cref="M:System.Reflection.Assembly.Load(System.String)"/>) всех сборок, привязанных через Costura.Fody (зависимости-references прикрепляются как ресурсы). Список сборок, загруженных в этом шаге, рекурсивно передается в шаг 2 для загрузки дальше по иерархической цепочке;
            2.3) Для сборки собирается список references (<see cref="M:System.Reflection.Assembly.GetReferencedAssemblies"/>) и рекурсивно передается в шаг 2 для загрузки дальше по иерархической цепочке;
            2.4) Проверяется, следует ли вызывать для сборки callback-метод. Проверка осуществляется на основе флага <see cref="T:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs"/>, переданного при вызове перечислителя и на основе вызова <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/>. Если проверка пройдена, то сборка добавляется к списку для передачи в callback-метод;
            3) После прохода по иерархической цепочке сборок перебирается список тех сборок, которые не были отфильтрованы в шаге 2.4 и для каждой вызывается callback-метод.
            
            Процесс перебора и загрузки частично асинхронный, т.е. по возможности создается максимальное количество потоков для загрузки сборок. В некоторых случаях асинхронность игнорируется либо используется контекст синхронизации, т.к. могут возникать Deadlock при попытке загрузить зависимости сборки, которая находится в стеке вызовов.
            Шаг 3 полностью синхронный, т.е. callback-метод вызывается строго последовательно для каждой найденной сборки.
            </summary>
        </member>
        <member name="T:TraceCore.LibraryEnumeratorFactory.ActionLoad">
            <summary>
            Перечисление действий, выполненных над сборкой перед вызовом Enumerate.callbackAfterLoad. 
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.ActionLoad.Enumerated">
            <summary>
            Сборка уже была ранее загружена в пул приложения, было выполнено только перечисление.
            </summary>
        </member>
        <member name="T:TraceCore.LibraryEnumeratorFactory.eLoggingOptions">
            <summary>
            Опции для записи в лог.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.eLoggingOptions.None">
            <summary>
            Без логирования.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.eLoggingOptions.EnumerationSummaryFirstRun">
            <summary>
            Записывать в лог время, за которое были перебраны все сборки и отработан callback для первого вызова перечислителя.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.eLoggingOptions.EnumerationSummary">
            <summary>
            Записывать в лог время, за которое были перебраны все сборки и отработан callback.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.eLoggingOptions.LoadAssembly">
            <summary>
            Записывать в лог сборки, которые были загружены методами <see cref="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)"/> и пр.
            </summary>
        </member>
        <member name="T:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs">
            <summary>
            Указывает, какие именно библиотеки следует включить в перечисление.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs.Default">
            <summary>
            Включает все библиотеки в перечисление по-умолчанию.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs.ExcludeSystem">
            <summary>
            Исключает системные библиотеки из перечисления.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs.ExcludeMicrosoft">
            <summary>
            Исключает библиотеки с префиксом "Microsoft." из перечисления.
            </summary>
        </member>
        <member name="F:TraceCore.LibraryEnumeratorFactory.EnumerateAttrs.ExcludeKnownExternal">
            <summary>
            Исключает известные сторонние библиотеки
            </summary>
        </member>
        <member name="M:TraceCore.LibraryEnumeratorFactory.Enumerate(System.Action{System.Reflection.Assembly},System.Func{System.String,System.Boolean},TraceCore.LibraryEnumeratorFactory.EnumerateAttrs,System.String,System.Boolean)">
            <summary>
            Осуществляет перечисление сборок в папке <see cref="P:TraceCore.LibraryEnumeratorFactory.LibraryDirectory"/>. 
            </summary>
            <param name="callbackAfterLoad">Если задано, то вызывается для сборки, если callbackBeforeLoad не задано или возвратило true.</param>
            <param name="callbackBeforeLoad">Если задано, то вызывается для каждой найденной сборки. Если возвращает false, то обработка этоЙ сборки прекращается.</param>
            <param name="enumerateAttrs">Указывает, какие библиотеки следует включить в перечисление.</param>
            <param name="nameForLogging"></param>
            <param name="tasksAllowed"></param>
        </member>
        <member name="M:TraceCore.LibraryEnumeratorFactory.Enumerate``1(System.Func{System.Reflection.Assembly,``0},System.Func{System.String,System.Boolean},TraceCore.LibraryEnumeratorFactory.EnumerateAttrs,System.String,System.Boolean)">
            <summary>
            Осуществляет перечисление сборок в папке <see cref="P:TraceCore.LibraryEnumeratorFactory.LibraryDirectory"/>. 
            </summary>
            <param name="callbackAfterLoad">Если задано, то вызывается для сборки, если callbackBeforeLoad не задано или возвратило true.</param>
            <param name="callbackBeforeLoad">Если задано, то вызывается для каждой найденной сборки. Если возвращает false, то обработка этоЙ сборки прекращается.</param>
            <param name="enumerateAttrs">Указывает, какие библиотеки следует включить в перечисление.</param>
            <param name="nameForLogging"></param>
            <param name="tasksAllowed"></param>
        </member>
        <member name="M:TraceCore.LibraryEnumeratorFactory.GetByFileName(System.String)">
            <summary>
            Возвращает сборку с указанным именем. Если сборка не загружена, то она загружается.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:TraceCore.LibraryEnumeratorFactory.LibraryDirectory">
            <summary>
            Указывает папку, содержащую исполняемые файлы приложения.
            1)  Если свойство было явно задано, то возвращает явно заданную папку.
            2)  Если свойство было явно задано как null, то возвращает <see cref="P:System.Environment.CurrentDirectory"/>.
            3)  По-умолчанию при инициализации значение формируется следующим образом:
            3.1)Если это приложение ASP.NET или приложение без точки входа (тоже признак ASP.NET), то используется папка, где расположена данная сборка. 
                Если сборка расположена в папке с именем "bin", то используется уровень выше (т.е. содержащий "bin").
            3.2)В остальных случаях используется рабочая папка (<see cref="P:System.Environment.CurrentDirectory"/>).
            </summary>
        </member>
        <member name="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter">
            <summary>
            Позволяет получить или установить глобальный фильтр сборок. Этот фильтр определяет, какие сборки исключаются из перечислений и автоматической загрузки при переборе дерева иерархии.
            Принимаемый аргумент представляет собой имя сборки. Если возвращает false, то сборка пропускается.
            
            Следует учесть, что перечислитель используется в инициализаторе <see cref="T:TraceCore.Startup.StartupFactory"/>. 
            Если инициализатор запускается автоматически (см. <see cref="T:TraceCore.Startup.StartupBehaviourAttribute"/>), <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/> не может быть установлен ДО вызова инициализатора. Таким образом, при автоматическом запуске инициализатора невозможно воспользоваться <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/>.
            Если необходимо инициализироваться с использованием <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/>, следует установить атрибут <see cref="T:TraceCore.Startup.StartupBehaviourAttribute"/> с флагом <see cref="P:TraceCore.Startup.StartupBehaviourAttribute.IsNeedStartupFactoryAuto"/> и запустить инициализатор вручную после установки фильтра.
            </summary>
        </member>
        <member name="P:TraceCore.LibraryEnumeratorFactory.LoggingOptions">
            <summary>
            Устанавливает глобальные настройки логирования во время перебора сборок.
            </summary>
        </member>
        <member name="T:TraceCore.Types.TypeHelpers">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Types.TypeHelpers.ExtractGenericInterface(System.Type,System.Type)">
            <summary>
            Пробует извлечь интерфейс <paramref name="interfaceType"/> из типа <paramref name="queryType"/>. 
            </summary>
            <returns>
            Возвращает null, если тип <paramref name="queryType"/> не реализует и не наследует <paramref name="interfaceType"/>.
            Возвращает <paramref name="interfaceType"/> в остальных случаях.
            </returns>
        </member>
        <member name="M:TraceCore.Types.TypeHelpers.ExtractGenericType(System.Type,System.Type)">
            <summary>
            Пробует извлечь универсальный (generic) тип <paramref name="genericType"/> из типа <paramref name="queryType"/>. 
            </summary>
            <returns>Возвращает первый тип в цепочке наследования, реализующий <paramref name="genericType"/>, либо null, если <paramref name="genericType"/> отсутствует в цепочке наследования.</returns>
            <example>
            <code>
            <![CDATA[
            class A<T> { }
            
            class B : A<int> { }
            
            class C : B { }
            
            class TestClass
            {
                static int Main()
                {
                    var t = TraceCore.Types.TypeHelpers.ExtractGenericType(typeof(C), typeof(A<>)); // t равно typeof(B).
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:TraceCore.Types.TypeHelpers.MatchesGenericType(System.Type,System.Type)">
            <summary>
            Возвращает true, если <paramref name="matchType"/> является универсальным типом, на основе которого построен тип <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Utils.JsonContractResolver">
            <summary>
            Обеспечивает дополнительные возможности при сериализации объектов в JSON.
            </summary>
        </member>
        <member name="P:TraceCore.Utils.JsonContractResolver.IgnorePropertiesAndFields">
            <summary>
            Список свойств и полей, которые будут игнорироваться при сериализации объекта.
            </summary>
        </member>
        <member name="M:TraceCore.Utils.JsonContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Utils.StringsHelper">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Utils.StringsHelper.GenerateRandomString(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Генерирует строку указанной длины <paramref name="length"/> из символов, содержащихся в <paramref name="chars"/>.
            </summary>
            <returns>Строка длиной <paramref name="length"/> из случайным образом выбранных символов, содержащихся в <paramref name="chars"/>.</returns>
        </member>
        <member name="M:TraceCore.Utils.StringsHelper.GenerateGuid(System.String)">
            <summary>
            Генерирует уникальный идентификатор (<see cref="T:System.Guid"/>) на основе строки <paramref name="source"/>. Если строка пустая (null или не содержит символов), то возвращаетя нулевой идентификатор <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Utils.TypeHelper">
            <summary>
            Вспомогательные методы для работы с типами и коллекциями. Взято из System.Web.WebPages.dll
            </summary>
        </member>
        <member name="M:TraceCore.Utils.TypeHelper.IsHaveBaseType(System.Type,System.Type)">
            <summary>
            Проверяет, является ли тип <paramref name="checkedType"/> производным от <paramref name="baseType"/>.
            </summary>
            <param name="checkedType"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Utils.TypeHelper.EnumFriendlyNames``1">
            <summary>
            Возвращает коллекцию всех значений указанного перечисления (enum) с читабельными описаниями.
            Если для значения присутствует атрибут <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, будет использовано значение свойства <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>.
            Если для значения присутствует атрибут <see cref="T:System.ComponentModel.DescriptionAttribute"/>, будет использовано значение свойства <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/>.
            
            При наличии обоих атрибутов используется <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Utils.TypeHelper.ObjectToDictionary(System.Object)">
            <summary>
            Возвращает коллекцию свойств и их значений объекта <paramref name="value"/> в виде пар ключ:значение.
            </summary>
        </member>
        <member name="M:TraceCore.Utils.TypeHelper.AddAnonymousObjectToDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Добавляет значения свойств объекта <paramref name="value"/> к коллекции <paramref name="dictionary"/>.
            Для получения свойств <paramref name="value"/> используется <see cref="M:TraceCore.Utils.TypeHelper.ObjectToDictionary(System.Object)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Utils.TypeHelper.IsAnonymousType(System.Type)">
            <summary>
            Определяет, является ли указанный тип анонимным.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Data.Errors.ReadonlyModeExcepton">
            <summary>
            Исключение, которое выдается при попытке изменить или добавить данные в репозиторий или контейнер UnitOfWork, связанные с контекстом, находящимся в режиме чтения.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.ReadonlyModeExcepton.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Data.Errors.UpdateConcurrencyException">
            <summary>
            Исключение, выбрасываемое <see cref="T:TraceCore.Data.IDataContext"/>, если во время применения изменений обнаружилось, что в источнике данных были произведены изменения с момента последнего получения данных.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateConcurrencyException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса UpdateConcurrencyException, используя значения по умолчанию.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateConcurrencyException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса UpdateConcurrencyException с указанным сообщением об ошибке.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр UpdateConcurrencyException с указанными сообщением об ошибке и внутренним исключением.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{TraceCore.Data.IRepositoryEntry})">
            <summary>
            Инициализирует новый экземпляр UpdateConcurrencyException с указанными сообщением об ошибке, внутренним исключением и списком сущностей, для которых возникли ошибки сохранения.
            </summary>
        </member>
        <member name="T:TraceCore.Data.Errors.UpdateException">
            <summary>
            Исключение, выбрасываемое <see cref="M:TraceCore.Data.IDataContext.SaveChanges"/>, если применение изменений провалилось.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса UpdateException, используя значения по умолчанию.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса UpdateException с указанным сообщением об ошибке.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр UpdateException с указанными сообщением об ошибке и внутренним исключением.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Errors.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{TraceCore.Data.IRepositoryEntry})">
            <summary>
            Инициализирует новый экземпляр UpdateException с указанными сообщением об ошибке, внутренним исключением и списком сущностей, для которых возникли ошибки сохранения.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Errors.UpdateException.Entries">
            <summary>
            Возвращает объекты <see cref="T:TraceCore.Data.IRepositoryEntry"/>, представляющие сущности, которые не могли быть сохранены в базе данных.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IDBOAccess">
            <summary>
            Описывает методы для использования сохраненных процедур и функций в источнике данных.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDBOAccess.StoredProcedure``1(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры. 
            Результат выполнения запроса возвращается в виде перечисления объектов типа <typeparamref name="TEntity"/>.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="M:TraceCore.Data.IDBOAccess.StoredProcedure``2(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры, возвращающей несколько наборов данных. 
            Результат выполнения запроса возвращается в виде нескольких перечислений объектов указанных типов.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="M:TraceCore.Data.IDBOAccess.StoredProcedure``3(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры, возвращающей несколько наборов данных. 
            Результат выполнения запроса возвращается в виде нескольких перечислений объектов указанных типов.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="T:TraceCore.Data.DataAccessProvider">
            <summary>
            Предоставляет доступ к репозиториям без возможности сохранения изменений.
            </summary>
        </member>
        <member name="M:TraceCore.Data.DataAccessProvider.Get``1">
            <summary>
            Возвращает репозиторий для объектов типа <typeparamref name="TEntity"/>. 
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Data.DataAccessProvider.StoredProcedure``1(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры. 
            Результат выполнения запроса возвращается в виде перечисления объектов типа <typeparamref name="TEntity"/>.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="M:TraceCore.Data.DataAccessProvider.StoredProcedure``2(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры, возвращающей несколько наборов данных. 
            Результат выполнения запроса возвращается в виде нескольких перечислений объектов указанных типов.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="M:TraceCore.Data.DataAccessProvider.StoredProcedure``3(System.String,System.Object)">
            <summary>
            Возвращает результат выполнения сохраненной процедуры, возвращающей несколько наборов данных. 
            Результат выполнения запроса возвращается в виде нескольких перечислений объектов указанных типов.
            Результат выполнения запроса не кешируется.
            </summary>
            <param name="procedure_name">Название сохраненной процедуры.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам сохраненной процедуры.
            Это может быть анонимный тип, например, для СП с параметром "@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="P:TraceCore.Data.DataAccessProvider.DefaultProvider">
            <summary>
            Возвращает провайдер данных по-умолчанию.
            </summary>
        </member>
        <member name="T:TraceCore.Data.ConnectionStringFactory">
            <summary>
            Предоставляет доступ к строкам подключения для <see cref="T:TraceCore.Data.IDataAccessProvider"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.ConnectionStringFactory.ConnectionStringResolver">
            <summary>
            Задает или возвращает механизм определения строк подключения для контекстов данных.
            Если равно null или <see cref="M:TraceCore.Data.IConnectionStringResolver.ResolveConnectionStringForDataContext(System.Type[])"/> возвращает null, то для получения используется первый подходящий провайдер строк подключения.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IConnectionStringProvider">
            <summary>
            Описывает провайдер строк подключения для <see cref="T:TraceCore.Data.IDataAccessProvider"/>. 
            Во время создания контекста доступа к данным <see cref="T:TraceCore.Data.IDataAccessProvider"/> может обращаться к внутренней фабрике <see cref="T:TraceCore.Data.ConnectionStringFactory"/>, к определенному зарегистрированному провайдеру, реализующему интерфейс <see cref="T:TraceCore.Data.IConnectionStringProvider"/> и получает строку подключения вызовом <see cref="M:TraceCore.Data.IConnectionStringProvider.GetConnectionString"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IConnectionStringProvider.GetConnectionString">
            <summary>
            Возвращает строку подключения.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IConnectionStringResolver">
            <summary>
            Предоставляет возможность определить строку подключения, возвращаемую для контекста данных с определенным набором типов объектов.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IConnectionStringResolver.ResolveConnectionStringForDataContext(System.Type[])">
            <summary>
            Возвращает строку подключения на основании списка типов объектов <paramref name="entityTypes"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Data.SQL.SQLFunctions">
            <summary>
            В разработке.
            </summary>
        </member>
        <member name="T:TraceCore.Data.TransactionsHelper">
            <summary>
            Вспомогательные методы для работы с транзакциями.
            </summary>
        </member>
        <member name="M:TraceCore.Data.TransactionsHelper.ReadUncommited">
            <summary>
            Создает и возвращает новую транзакцию для чтения данных в режиме WITH NOLOCK.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Data.Validation.EntityValidationException">
            <summary>
            Представляет исключение, вызываемое из <see cref="M:TraceCore.Data.IDataContext.SaveChanges"/>, когда сущности не проходят проверку.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса EntityValidationException, используя значения по умолчанию.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса EntityValidationException с указанным сообщением об ошибке.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{TraceCore.Data.Validation.EntityValidationResult})">
            <summary>
            Выполняет инициализацию нового экземпляра класса EntityValidationException с указанным сообщением об ошибке и результатами проверки.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр EntityValidationException с указанными сообщением об ошибке и внутренним исключением.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{TraceCore.Data.Validation.EntityValidationResult},System.Exception)">
            <summary>
            Инициализирует новый экземпляр EntityValidationException с указанными сообщением об ошибке, результатами проверки и внутренним исключением.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.EntityValidationException.EntityValidationErrors">
            <summary>
            Получает ошибки проверки, связанные с сущностью.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationException.CreateComplexMessage(System.String,System.String)">
            <summary>
            Возвращает комплексное сообщение об ошибке.
            </summary>
            <param name="glueBefore">Подставляется перед каждой ошибкой.</param>
            <param name="glueAfter">Подставляется после каждой ошибки.</param>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Data.Validation.EntityValidationResult">
            <summary>
            Представляет результаты проверки для одной сущности.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.EntityValidationResult.#ctor(TraceCore.Data.IRepositoryEntry,System.Collections.Generic.IEnumerable{TraceCore.Data.Validation.ValidationError})">
            <summary>
            Создает экземпляр класса EntityValidationResult.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.EntityValidationResult.Entry">
            <summary>
            Возвращает экземпляр класса <see cref="T:TraceCore.Data.IRepositoryEntry"/> , к которому применяются результаты.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.EntityValidationResult.IsValid">
            <summary>
            Возвращает значение, указывающее, допустима ли сущность.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.EntityValidationResult.ValidationErrors">
            <summary>
            Возвращает ошибки проверки. Не может иметь значение NULL.
            </summary>
        </member>
        <member name="T:TraceCore.Data.Validation.ValidationError">
            <summary>
            Ошибка проверки. Ошибка проверки может быть на уровне сущности или на уровне свойства.
            </summary>
        </member>
        <member name="M:TraceCore.Data.Validation.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Создает экземпляр класса ValidationError с именем свойства <paramref name="propertyName"/> (может быть пустым) и конкретной ошибкой <paramref name="errorMessage"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.ValidationError.ErrorMessage">
            <summary>
            Возвращает сообщение об ошибке проверки.
            </summary>
        </member>
        <member name="P:TraceCore.Data.Validation.ValidationError.PropertyName">
            <summary>
            Возвращает имя недопустимого свойства.
            Если ошибка относится к сущности, то вернет null.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IDataAccessProvider">
            <summary>
            Представляет провайдер данных для механизма репозиториев.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataAccessProvider.CreateDataContext(System.Type[])">
            <summary>
            Возвращает новый контекст доступа к данным для списка типов <paramref name="entityTypes"/>.
            </summary>
            <param name="entityTypes">Список типов данных, зарегистрированных в контексте. Контекст сможет работать только с переданными типами данных.</param>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Data.IDataAccessProvider.CreateRepository``1(TraceCore.Data.IDataContext)">
            <summary>
            Возвращает новый репозиторий для объектов типа <typeparamref name="TEntity"/>.
            </summary>
            <param name="context">Контекст доступа к данным, с которым будет работать репозиторий. Должен быть создан в том же провайдере данных, что и репозиторий.</param>
            <returns></returns>
        </member>
        <member name="T:TraceCore.Data.IQuery">
            <summary>
            Представляет запрос LINQ to Entities к контексту <see cref="T:TraceCore.Data.IDataContext"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IQuery.Repository">
            <summary>
            Возвращает репозиторий, породивший запрос.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IQuery`1">
            <summary>
            Представляет запрос LINQ to Entities к контексту <see cref="T:TraceCore.Data.IDataContext"/> для типа данных <typeparamref name="TEntity"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IQuery`1.AsNoTracking">
            <summary>
            Отключает кеширование для нового запроса к репозиторию.
            </summary>
            <returns>Новый запрос с атрибутом NoTracking или исходный запрос, если атрибут NoTracking не поддерживается</returns>
        </member>
        <member name="M:TraceCore.Data.IQuery`1.IsNoTracking">
            <summary>
            Указывает, является ли данный запрос некешируемым (т.е. к которому был применен метод <see cref="M:TraceCore.Data.IQuery`1.AsNoTracking"/>).
            </summary>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Data.IQuery`1.Include(System.String)">
            <summary>
            Задает связанные объекты, включаемые в результаты запроса.
            </summary>
            <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
            <returns>Новый запрос <see cref="T:TraceCore.Data.IQuery`1"/> с определенным путем запроса.</returns>
        </member>
        <member name="M:TraceCore.Data.IQuery`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Задает связанные объекты, включаемые в результаты запроса.
            </summary>
            <param name="path">Выражение, описывающее связанные объекты, включаемые в результаты запроса.</param>
            <returns>Новый запрос <see cref="T:TraceCore.Data.IQuery`1"/> с определенным путем запроса.</returns>
        </member>
        <member name="T:TraceCore.Data.IDataContext">
            <summary>
            Описывает контекст доступа к данным.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.ExecuteQuery``1(System.Object,System.Object,System.Boolean,``0)">
            <summary>
            Возвращает результат выполнения запроса внутри контекста. В качестве запроса может выступать строка, объект и т.п. - зависит от возможностей конкретной реализации контекста.
            Результат выполнения запроса возвращается в виде перечисления объектов типа <typeparamref name="TEntity"/>.
            </summary>
            <param name="query">Запрос, который необходимо выполнить.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам запроса.
            Это может быть анонимный тип, например, для запроса с условием "DateChange=@Date" объявленный так: new { Date = DateTime.Now }
            </param>
            <param name="cacheInLocal">Указывает, следует ли кешировать объекты, созданные в результате выполнения запроса, во внутренних репозиториях соответствующих типов.</param>
            <param name="entityExample"></param>
        </member>
        <member name="M:TraceCore.Data.IDataContext.ExecuteQuery(System.Object,System.Object)">
            <summary>
            Возвращает результат выполнения запроса внутри контекста. В качестве запроса может выступать строка, объект и т.п. - зависит от возможностей конкретной реализации контекста.
            Возвращает количество строк, затронутых запросом..
            </summary>
            <param name="query">Запрос, который необходимо выполнить.</param>
            <param name="parameters">
            Объект, содержащий свойства с именами, соответствующими параметрам запроса.
            Это может быть анонимный тип, например, для запроса с условием "DateChange=@Date" объявленный так: new { Date = DateTime.Now }
            </param>
        </member>
        <member name="M:TraceCore.Data.IDataContext.GetItemState(System.Object)">
            <summary>
            Возвращает состояние объекта <paramref name="item"/> относительно текущего контекста данных.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.SaveChanges">
            <summary>
            Применяет все изменения базы данных, произведенные в контексте.
            После окончания операции для каждого затронутого объекта выполняются методы, помеченные атрибутом <see cref="T:TraceCore.Items.SavedInContextEventAttribute"/>.
            </summary>
            <returns>Количество объектов, записанных в базу данных.</returns>
        </member>
        <member name="M:TraceCore.Data.IDataContext.SaveChanges``1">
            <summary>
            Применяет все изменения базы данных, произведенные в контексте для указанного типа объектов <typeparamref name="TEntity"/>.
            После окончания операции для каждого затронутого объекта выполняются методы, помеченные атрибутом <see cref="T:TraceCore.Items.SavedInContextEventAttribute"/>.
            </summary>
            <typeparam name="TEntity">Тип сущностей, для которых следует применить изменения.</typeparam>
            <returns>Количество объектов, записанных в базу данных.</returns>
        </member>
        <member name="M:TraceCore.Data.IDataContext.SaveChanges(System.Type)">
            <summary>
            Применяет все изменения базы данных, произведенные в контексте для указанного типа объектов <paramref name="entityType"/>.
            После окончания операции для каждого затронутого объекта выполняются методы, помеченные атрибутом <see cref="T:TraceCore.Items.SavedInContextEventAttribute"/>.
            </summary>
            <param name="entityType">Тип сущностей, для которых следует применить изменения.</param>
            <returns>Количество объектов, записанных в базу данных.</returns>
        </member>
        <member name="M:TraceCore.Data.IDataContext.SaveChangesAsync">
            <summary>
            Асинхронно применяет все изменения базы данных, произведенные в контексте.
            После окончания операции для каждого затронутого объекта выполняются методы, помеченные атрибутом <see cref="T:TraceCore.Items.SavedInContextEventAttribute"/>.
            </summary>
            <returns>Задача, представляющая асинхронную операцию сохранения. Результат задачи содержит количество объектов, записанных в базу данных.</returns>
        </member>
        <member name="M:TraceCore.Data.IDataContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Асинхронно применяет все изменения базы данных, произведенные в контексте.
            После окончания операции для каждого сохраненного объекта выполняются методы, помеченные атрибутом <see cref="T:TraceCore.Items.SavedInContextEventAttribute"/>.
            </summary>
            <param name="cancellationToken">Токен System.Threading.CancellationToken, который нужно отслеживать во время ожидания выполнения задачи.</param>
            <returns>Задача, представляющая асинхронную операцию сохранения. Результат задачи содержит количество объектов, записанных в базу данных.</returns>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.TimeSpan)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction,System.TimeSpan)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            См. <see cref="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IDataContext.IsReadonly">
            <summary>
            Возвращает и задает режим чтения/записи данных. Если true, то изменение данных в контексте возможны. Если false, то методы SaveChanges/AddEntity будут возвращать исключение <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IDataContext.RegisteredTypes">
            <summary>
            Возвращает список типов объектов, зарегистрированных для использования в контексте данных.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IDataContext.QueryTimeout">
            <summary>
            Возвращает или задает таймаут выполнения запроса в миллисекундах.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UpsertField">
            <summary>
            Указывает, как следует обновлять значение столбца.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UpsertField.#ctor(System.String)">
            <summary>
            Указывает, что столбец должен быть обновлен напрямую.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UpsertField.#ctor(System.String,System.String)">
            <summary>
            Указывает, что столбец должен быть обновлен напрямую.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UpsertField.ColumnName">
            <summary>
            Название столбца.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UpsertField.IsDirect">
            <summary>
            Указывает, что значение поля должно быть обновлено путем простого приравнивания (Column = NewValue).
            </summary>
        </member>
        <member name="P:TraceCore.Data.UpsertField.UpdateRightPart">
            <summary>
            Преобразование для столбца.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IRepository">
            <summary>
            Представляет интерфейс для доступа к объектам в репозитории, для выполнения запросов и операций SCRUD.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IRepository.DataContext">
            <summary>
            Возвращает контекст доступа к данным для данного репозитория.
            Если репозиторий относится к контейнеру <see cref="T:TraceCore.Data.UnitOfWorkBase"/>, то вернет контекст доступа к данным всего контейнера.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository.HasChanges">
            <summary>
            Определяет, имеются ли в объектах репозитория несохраненные изменения.
            </summary>
            <returns>Возвращает true, если свойства каких-либо объектов в репозитории были изменены и отличаются от оригинальных значений (полученных при первом добавлении объекта в репозиторий).</returns>
        </member>
        <member name="M:TraceCore.Data.IRepository.ClearCache">
            <summary>
            Очищает локальный кеш репозитория.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IRepository`1">
            <summary>
            Представляет интерфейс для доступа к объектам в репозитории, для выполнения запросов и операций SCRUD.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.Add(`0[])">
            <summary>
            Добавляет объекты <paramref name="items"/> в репозиторий.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.AddOrUpdate(`0[])">
            <summary>
            Добавляет объекты <paramref name="items"/> в репозиторий.
            Для объектов, уже находящихся в репозитории, будут выполнены операции UPDATE, для остальных - CREATE (<see cref="M:TraceCore.Data.IRepository`1.Add(`0[])"/>).
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.AddOrUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0[])">
            <summary>
            Добавляет объекты <paramref name="items"/> в репозиторий.
            Для объектов, уже находящихся в репозитории, будут выполнены операции UPDATE, для остальных - CREATE (<see cref="M:TraceCore.Data.IRepository`1.Add(`0[])"/>).
            Ключом для определения существующих записей является значение, возвращаемое <paramref name="identifierExpression"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.InsertOrDuplicateUpdate(System.Collections.Generic.IEnumerable{`0},TraceCore.Data.UpsertField[])">
            <summary>
            Конструкция UPSERT (INSERT OR UPDATE).
            Создает конструкцию UPSERT (MERGE для MS SQL, INSERT ON DUPLICATE KEY UPDATE для MySQL) на основе свойств объектов в <paramref name="objectsIntoQuery"/> и списка полей <paramref name="updateFields"/>, а также метаданных типа <typeparamref name="TEntity"/>.
            </summary>
            <param name="objectsIntoQuery">Список объектов <paramref name="objectsIntoQuery"/> для добавления или обновления.</param>
            <param name="updateFields">Список полей, значения которых следует обновить, если объект с ключом уже существует в базе данных.</param>
            <returns>Количество строк, затронутых операций.</returns>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.InsertOrDuplicateUpdate(System.Collections.Generic.IEnumerable{`0},System.Object@,TraceCore.Data.UpsertField[])">
            <summary>
            Конструкция UPSERT (INSERT OR UPDATE).
            Создает конструкцию UPSERT (MERGE для MS SQL, INSERT ON DUPLICATE KEY UPDATE для MySQL) на основе свойств объектов в <paramref name="objectsIntoQuery"/> и списка полей <paramref name="updateFields"/>, а также метаданных типа <typeparamref name="TEntity"/>.
            </summary>
            <param name="objectsIntoQuery">Список объектов <paramref name="objectsIntoQuery"/> для добавления или обновления.</param>
            <param name="lastIdentity">Идентификатор последней вставленной строки в данном запросе.</param>
            <param name="updateFields">Список полей, значения которых следует обновить, если объект с ключом уже существует в базе данных.</param>
            <returns>Количество строк, затронутых операций.</returns>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.InsertOrDuplicateUpdate(System.String,TraceCore.Data.UpsertField[])">
            <summary>
            См. <see cref="M:TraceCore.Data.IRepository`1.InsertOrDuplicateUpdate(System.Collections.Generic.IEnumerable{`0},TraceCore.Data.UpsertField[])"/>. Отличается тем, что принимает не список объектов, а строку запроса.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.Delete(`0)">
            <summary>
            Помечает объект <paramref name="item"/> в репозитории на удаление. Если объект не прикреплен к репозиторию, возвращает ошибку.
            </summary>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.HasChanges(`0)">
            <summary>
            Определяет, имеются ли для объекта <paramref name="item"/> в репозитории несохраненные изменения.
            </summary>
            <param name="item"></param>
            <returns>Возвращает true, если свойства объекта были изменены и отличаются от оригинальных значений (полученных при первом добавлении объекта в репозиторий).</returns>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.FromCache(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Возвращает объекты из локального кеша репозитория.
            </summary>
            <param name="condition">Условие для поиска объектов в кеше репозитория.</param>
        </member>
        <member name="M:TraceCore.Data.IRepository`1.AsBindingList">
            <summary>
            Возвращает коллекцию <see cref="T:System.ComponentModel.BindingList`1"/> с привязкой к кешированному содержимому репозитория.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IRepository`1.IsReadonly">
            <summary>
            Отражает состояние чтения/записи контекста данных, с которым связан репозиторий.
            В режиме "только чтение":
                1. Возможно только выполнение запросов;
                2. Метод <see cref="M:TraceCore.Data.IRepository`1.Add(`0[])"/> возвращает ошибку при попытке добавить объект.
                3. Метод <see cref="M:TraceCore.Data.IRepository`1.AddOrUpdate(`0[])"/> возвращает ошибку при попытке добавить объект.
                4. Метод <see cref="M:TraceCore.Data.IRepository`1.Delete(`0)"/> возвращает ошибку при попытке удалить объект.
                5. Метод <see cref="M:TraceCore.Data.IRepository`1.HasChanges(`0)"/> всегда возвращает false.
                6. Метод <see cref="M:TraceCore.Data.IRepository`1.HasChanges(`0)"/> всегда возвращает false.
            </summary>
        </member>
        <member name="T:TraceCore.Data.ItemState">
            <summary>
            Описывает состояние объекта в контейнере <see cref="T:TraceCore.Data.UnitOfWorkBase"/> 
            </summary>
        </member>
        <member name="F:TraceCore.Data.ItemState.Detached">
            <summary>
            Объект не относится к контейнеру, не содержится ни в одном из репозиториев.
            </summary>
        </member>
        <member name="F:TraceCore.Data.ItemState.Unchanged">
            <summary>
            Объект прикреплен к контейнеру и для него нет непримененных изменений внутри контейнера.
            </summary>
        </member>
        <member name="F:TraceCore.Data.ItemState.Added">
            <summary>
            Объект был добавлен в контейнер, но для него не были применены изменения.
            </summary>
        </member>
        <member name="F:TraceCore.Data.ItemState.Deleted">
            <summary>
            Объект прикреплен к контейнеру и помечен на удаление.
            </summary>
        </member>
        <member name="F:TraceCore.Data.ItemState.Modified">
            <summary>
            Объект прикреплен к контейнеру, для него есть непримененные изменения внутри контейнера.
            </summary>
        </member>
        <member name="T:TraceCore.Data.ITransactionScope">
            <summary>
            Предоставляет методы для работы с областью транзакции.
            Все применения изменений, выполняемые внутри области, будут объединены в общую транзакцию.
            Если метод <see cref="M:TraceCore.Data.ITransactionScope.Commit"/> не будет вызван, то во время освобождения объекта области (<see cref="M:System.IDisposable.Dispose"/>) транзакция будет откачена.
            Оказывает действие только на работу следующих методов:
                1. <see cref="M:TraceCore.Data.UnitOfWorkBase.SaveChanges"/>;
                2. <see cref="M:TraceCore.Data.UnitOfWorkBase.SaveChanges(System.Type)"/>;
                3. <see cref="M:TraceCore.Data.UnitOfWorkBase.SaveChanges``1"/>;
                
            </summary>
        </member>
        <member name="M:TraceCore.Data.ITransactionScope.Commit">
            <summary>
            Указывает, что все операции в области успешно завершены.
            </summary>
        </member>
        <member name="T:TraceCore.Data.IRepositoryEntry">
            <summary>
            Экземпляры данного класса предоставляют доступ к сведениям о сущностях, отслеживаемых контекстом данных <see cref="T:TraceCore.Data.IDataContext"/>, и возможность управления этими сущностями. 
            </summary>
        </member>
        <member name="P:TraceCore.Data.IRepositoryEntry.Entity">
            <summary>
            Возвращает сущность.
            </summary>
        </member>
        <member name="P:TraceCore.Data.IRepositoryEntry.State">
            <summary>
            Возвращает или задает состояние сущности.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UnitOfWork`1">
            <summary>
            Класс контейнера UnitOfWork для работы с одним типом объектов <typeparamref name="TEntity1"/>.
            Подробнее см. <see cref="T:TraceCore.Data.UnitOfWorkBase"/>.
            </summary>
            <typeparam name="TEntity1"></typeparam>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`1.Repo1">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity1"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UnitOfWork`2">
            <summary>
            Класс контейнера UnitOfWork для работы с типами объектов <typeparamref name="TEntity1"/>, <typeparamref name="TEntity2"/>.
            Подробнее см. <see cref="T:TraceCore.Data.UnitOfWorkBase"/>.
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`2.Repo1">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity1"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`2.Repo2">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity2"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UnitOfWork`3">
            <summary>
            Класс контейнера UnitOfWork для работы с типами объектов <typeparamref name="TEntity1"/>, <typeparamref name="TEntity2"/>, <typeparamref name="TEntity3"/>.
            Подробнее см. <see cref="T:TraceCore.Data.UnitOfWorkBase"/>.
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <typeparam name="TEntity3"></typeparam>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`3.Repo1">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity1"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`3.Repo2">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity2"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`3.Repo3">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity3"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UnitOfWork`4">
            <summary>
            Класс контейнера UnitOfWork для работы с типами объектов <typeparamref name="TEntity1"/>, <typeparamref name="TEntity2"/>, <typeparamref name="TEntity3"/>, <typeparamref name="TEntity4"/>.
            Подробнее см. <see cref="T:TraceCore.Data.UnitOfWorkBase"/>.
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <typeparam name="TEntity3"></typeparam>
            <typeparam name="TEntity4"></typeparam>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`4.Repo1">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity1"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`4.Repo2">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity2"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`4.Repo3">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity3"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWork`4.Repo4">
            <summary>
            Возвращает репозиторий для типа объектов <typeparamref name="TEntity4"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Data.UnitOfWorkBase">
            <summary>
            Базовый класс контейнера UnitOfWork.
            Типизированные варианты принимают в качестве параметров-типов типы объектов, с которыми необходимо работать в 
            конкретном контейнере.
            Свойства типа RepoXX ссылаются на репозитории объектов, указанных в качестве параметров-типов (например, <see cref="P:TraceCore.Data.UnitOfWork`1.Repo1"/>).
            Кроме этого, по-прежнему можно обратиться к репозиторию через метод <see cref="M:TraceCore.Data.UnitOfWorkBase.Get``1"/>, 
            с условием, что данный тип объектов должен быть зарегистрирован в контейнере.
            
            Кроме того, если имеются свойства с типом <see cref="T:TraceCore.Data.IRepository`1"/>, то в конструкторе им будет автоматически назначен внутренний репозиторий соответствующего типа. 
            Фактически, будет создана обертка над вызовом <see cref="M:TraceCore.Data.UnitOfWorkBase.Get``1"/>.
            Поддерживаются get-set свойства, get свойства (без set, автоматическое назначение внутреннего field).
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.#ctor(System.Type[])">
            <summary>
            Конструктор принимает список типов объектов для регистрации репозиториев.
            При попытке работать с незарегистрированным типом объектов (через <see cref="M:TraceCore.Data.UnitOfWorkBase.Get``1"/> или свойства-ссылки RepoXX) 
            будет сгенерировано исключение.
            </summary>
            <param name="entityTypes">Список типов объектов</param>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.Get``1">
            <summary>
            Возвращает интерфейс для работы с репозиторием указанного типа объектов <typeparamref name="TEntity"/>.
            Репозиторий регистрируется для указанного типа объектов <typeparamref name="TEntity"/> внутри контейнера и сохраняется до уничтожения контейнера.
            Тип объектов <typeparamref name="TEntity"/> должен быть типом, зарегистрированным для контекста доступа к данным (можно проверить в <see cref="P:TraceCore.Data.IDataContext.RegisteredTypes"/>).
            </summary>
            <returns></returns>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.GetState(System.Object)">
            <summary>
            Возвращает состояние объекта <paramref name="item"/> относительно текущего контейнера.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.Dispose">
            <summary>
            Выполняет операции для очистки данных и уничтожения объекта. 
            Все незавершенные транзакции для объектов внутри контейнера откатываются.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.AddEntity``1(``0)">
            <summary>
            Добавляет объект <paramref name="item"/> в репозиторий соответствующего типа <typeparamref name="TEntity"/>.
            Тип <typeparamref name="TEntity"/> должен быть зарегистрирован в контейнере.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.DeleteEntity``1(``0)">
            <summary>
            Удаляет объект <paramref name="item"/> из репозитория соответствующего типа <typeparamref name="TEntity"/>.
            Тип <typeparamref name="TEntity"/> должен быть зарегистрирован в контейнере.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.SaveChanges">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.SaveChanges"/>.  
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.SaveChanges``1">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.SaveChanges``1"/>.  
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.SaveChanges(System.Type)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.SaveChanges(System.Type)"/>.  
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.TransactionScopeOption)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.Transaction)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.TransactionScopeOption,System.TimeSpan)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.Transaction,System.TimeSpan)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Data.UnitOfWorkBase.CreateScope(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            См. <see cref="M:TraceCore.Data.IDataContext.CreateScope(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)"/>.
            </summary>
        </member>
        <member name="P:TraceCore.Data.UnitOfWorkBase.DataContext">
            <summary>
            Возвращает контекст доступа к данным.
            </summary>
        </member>
        <member name="T:TraceCore.Properties.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:TraceCore.Properties.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:TraceCore.Properties.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:TraceCore.Properties.Resources.TraceStudioLogo">
            <summary>
              Поиск локализованного ресурса типа System.Drawing.Icon, аналогичного (Значок).
            </summary>
        </member>
        <member name="T:TraceCore.Startup.IStartup">
            <summary>
            Представляет инициализатор, запускаемый при загрузке (Load) сборки (<see cref="T:System.Reflection.Assembly"/>).
            Во время работы <see cref="M:TraceCore.Startup.StartupFactory.Startup"/> обнаруживаются все классы, реализующие интерфейс. Далее, если у класса есть беспараметрический публичный конструктор, создается экземпляр типа и вызывается метод <see cref="M:TraceCore.Startup.IStartup.Startup"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Startup.IStartup.Startup">
            <summary>
            Метод, вызываемый загрузчиком инициализаторов. Вызывается один раз для каждой сборки.
            В силу особенностей инициализации разных видов приложений, может вызываться не моментально при загрузке.
            См. <see cref="T:TraceCore.Startup.StartupBehaviourAttribute"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Startup.StartupBehaviourAttribute">
            <summary>
            Определяет поведение загрузчика <see cref="T:TraceCore.Startup.StartupFactory"/> во время загрузки библиотеки TraceCore. Играет роль только при установке для entry assembly.
            В случае, если у приложения есть entry assembly (отсутствует при запуске из unmanaged-кода, т.е. для ASP.NET MVC отсутствует) и у entry assembly задан атрибут <see cref="T:TraceCore.Startup.StartupBehaviourAttribute"/> с флагом <see cref="P:TraceCore.Startup.StartupBehaviourAttribute.IsNeedStartupFactoryAuto"/> равным False, то во время загрузки библитеки TraceCore НЕ БУДЕТ запущен инициализатор <see cref="T:TraceCore.Startup.StartupFactory"/>. В этом случае требуется ручной запуск инициализатора.
            Во всех остальных случаях инициализатор запускается автоматически.
            См. <see cref="T:TraceCore.Startup.StartupFactory"/>.
            См. также влияние на <see cref="P:TraceCore.LibraryEnumeratorFactory.GlobalAssemblyFilter"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Startup.StartupBehaviourAttribute.#ctor(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:TraceCore.Startup.StartupBehaviourAttribute.IsNeedStartupFactoryAuto">
            <summary>
            См. описание <see cref="T:TraceCore.Startup.StartupBehaviourAttribute"/>.
            </summary>
        </member>
        <member name="T:TraceCore.Startup.StartupFactory">
            <summary>
            Инициализатор библиотеки TraceCore.
            Во время вызова <see cref="M:TraceCore.Startup.StartupFactory.Startup"/> выполняется ряд инициализирующих действий. Метод вызывается только один, все повторные вызовы игнорируются. Вызов потокобезопасный - параллельное выполнение блокируется.
            Действия во время инициализации:
            1) Выполняется создание экземпляров типов, реализующих <see cref="T:TraceCore.Startup.IStartup"/> и вызов их методов <see cref="M:TraceCore.Startup.IStartup.Startup"/>;
            2) Выполняется создание и инициализация экземпляров типов, наследующих от <see cref="T:TraceCore.Factory.SingletonBaseStartup`1"/> и <see cref="T:TraceCore.Factory.ProvidersFactoryStartup`2"/>. Подробнее см. описание указанных типов.
            </summary>
        </member>
        <member name="M:TraceCore.Startup.StartupFactory.Startup">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Startup.ModuleInjector">
            <summary>
            </summary>
        </member>
        <member name="M:TraceCore.Startup.ModuleInjector.InjectorLoader">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Tasks.BackgroundServicesFactory">
            <summary>
            Представляет фабрику провайдеров для фоновых служб.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.BackgroundServicesFactory.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:TraceCore.Tasks.Cron">
            <summary>
            Вспомогательный класс с общими значениями для выражений Cron
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Minutely">
            <summary>
            Returns cron expression that fires every minute.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Hourly">
            <summary>
            Returns cron expression that fires every hour at the first minute.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Hourly(System.Int32)">
            <summary>
            Returns cron expression that fires every hour at the specified minute.
            </summary>
            <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Daily">
            <summary>
            Returns cron expression that fires every day at 00:00 UTC.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Daily(System.Int32)">
            <summary>
            Returns cron expression that fires every day at the first minute of
            the specified hour in UTC.
            </summary>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Daily(System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every day at the specified hour and minute
            in UTC.
            </summary>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
            <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Weekly">
            <summary>
            Returns cron expression that fires every week at Monday, 00:00 UTC.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Weekly(System.DayOfWeek)">
            <summary>
            Returns cron expression that fires every week at 00:00 UTC of the specified
            day of the week.
            </summary>
            <param name="dayOfWeek">The day of week in which the schedule will be activated.</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Weekly(System.DayOfWeek,System.Int32)">
            <summary>
            Returns cron expression that fires every week at the first minute
            of the specified day of week and hour in UTC.
            </summary>
            <param name="dayOfWeek">The day of week in which the schedule will be activated.</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Weekly(System.DayOfWeek,System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every week at the specified day
            of week, hour and minute in UTC.
            </summary>
            <param name="dayOfWeek">The day of week in which the schedule will be activated.</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
            <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Monthly">
            <summary>
            Returns cron expression that fires every month at 00:00 UTC of the first
            day of month.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Monthly(System.Int32)">
            <summary>
            Returns cron expression that fires every month at 00:00 UTC of the specified
            day of month.
            </summary>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Monthly(System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every month at the first minute of the
            specified day of month and hour in UTC.
            </summary>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Monthly(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every month at the specified day of month,
            hour and minute in UTC.
            </summary>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
            <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Yearly">
            <summary>
            Returns cron expression that fires every year on Jan, 1st at 00:00 UTC.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Yearly(System.Int32)">
            <summary>
            Returns cron expression that fires every year in the first day at 00:00 UTC
            of the specified month.
            </summary>
            <param name="month">The month in which the schedule will be activated (1-12).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Yearly(System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every year at 00:00 UTC of the specified
            month and day of month.
            </summary>
            <param name="month">The month in which the schedule will be activated (1-12).</param>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Yearly(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every year at the first minute of the
            specified month, day and hour in UTC.
            </summary>
            <param name="month">The month in which the schedule will be activated (1-12).</param>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.Yearly(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns cron expression that fires every year at the specified month, day,
            hour and minute in UTC.
            </summary>
            <param name="month">The month in which the schedule will be activated (1-12).</param>
            <param name="day">The day of month in which the schedule will be activated (1-31).</param>
            <param name="hour">The hour in which the schedule will be activated (0-23).</param>
            <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.MinuteInterval(System.Int32)">
            <summary>
            Returns cron expression that fires every &lt;<paramref name="interval"></paramref>&gt; minutes.
            </summary>
            <param name="interval">The number of minutes to wait between every activation.</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.HourInterval(System.Int32)">
            <summary>
            Returns cron expression that fires every &lt;<paramref name="interval"></paramref>&gt; hours.
            </summary>
            <param name="interval">The number of hours to wait between every activation.</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.DayInterval(System.Int32)">
            <summary>
            Returns cron expression that fires every &lt;<paramref name="interval"></paramref>&gt; days.
            </summary>
            <param name="interval">The number of days to wait between every activation.</param>
        </member>
        <member name="M:TraceCore.Tasks.Cron.MonthInterval(System.Int32)">
            <summary>
            Returns cron expression that fires every &lt;<paramref name="interval"></paramref>&gt; months.
            </summary>
            <param name="interval">The number of months to wait between every activation.</param>
        </member>
        <member name="T:TraceCore.Tasks.IBackgroundServicesFactory">
            <summary>
            Представляет провайдер для выполнения фоновых задач и запуска служб.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.IBackgroundServicesFactory.SetTask(System.String,System.String,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Устанавливает повторяющуюся задачу с именем <paramref name="name"/>, указанным расписанием <paramref name="cronExpression"/> на основе делегата <paramref name="taskDelegate"/>.
            Если задача с таким именем уже существует, то делегат и расписание будут обновлены.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.IBackgroundServicesFactory.SetTask(System.String,System.DateTime,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Устанавливает разовую задачу с именем <paramref name="name"/>, указанным временем запуска <paramref name="startTime"/> на основе делегата <paramref name="taskDelegate"/>.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.IBackgroundServicesFactory.DeleteAllTasks">
            <summary>
            Удаляет все существующие задачи.
            </summary>
        </member>
        <member name="M:TraceCore.Tasks.IBackgroundServicesFactory.RemoveTask(System.String)">
            <summary>
            Удаляет задачу с именем <paramref name="name"/>.
            </summary>
        </member>
        <member name="T:System.HandledException">
            <summary>
            Представляет исключение, обработанное кодом движка, т.е. такое, которое можно использовать для отображения пользователю.
            </summary>
        </member>
        <member name="M:System.HandledException.#ctor(System.String)">
            <summary>
            Выполняет инициализацию нового экземпляра класса, используя указанное сообщение об ошибке.
            </summary>
        </member>
        <member name="M:System.HandledException.#ctor(System.String,System.Exception)">
            <summary>
            Выполняет инициализацию нового экземпляра класса с указанным сообщением об ошибке и ссылкой на внутреннее исключение, которое стало причиной данного исключения.
            </summary>
        </member>
        <member name="M:System.HandledException.FromUnhandledException(System.Exception)">
            <summary>
            Аналогично созданию нового экземпляра класса с передачей сообщения "Неожиданная ошибка" и ссылкой на исключение <paramref name="ex"/>.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:System.TupleE`2">
            <summary>
            Представляет изменяемый вариант <see cref="T:System.Tuple`2"/>.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:System.TupleE`2.#ctor(`0,`1)">
            <summary>
            См. <see cref="M:System.Tuple`2.#ctor(`0,`1)"/>.
            </summary>
        </member>
        <member name="P:System.TupleE`2.Item1">
            <summary>
            См. <see cref="P:System.Tuple`2.Item1"/>.
            </summary>
        </member>
        <member name="P:System.TupleE`2.Item2">
            <summary>
            См. <see cref="P:System.Tuple`2.Item2"/>.
            </summary>
        </member>
        <member name="M:System.TupleE`2.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.DecimalPrecisionAttribute">
            <summary>
            Позволяет задать точность и размерность поля, хранящего десятичное число.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.DecimalPrecisionAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.DecimalPrecisionAttribute.Precision">
            <summary>
            Размерность поля (кол-во знаков в числе).
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.DecimalPrecisionAttribute.Scale">
            <summary>
            Точность поля (кол-во знаков в дробной части).
            </summary>
        </member>
        <member name="T:System.RepositoryAndQueryExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:System.RepositoryAndQueryExtensions.Delete``1(System.Linq.IQueryable{``0})">
            <summary>
            Помечает объекты, полученные в результате запроса <paramref name="source"/>, на удаление.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:System.RepositoryAndQueryExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Задает связанные объекты, включаемые в результаты запроса.
            </summary>
            <param name="source">Исходный запрос.</param>
            <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
            <returns>Новый запрос <see cref="T:System.Linq.IQueryable`1"/> с определенным путем запроса.</returns>
        </member>
        <member name="M:System.RepositoryAndQueryExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Задает связанные объекты, включаемые в результаты запроса.
            </summary>
            <param name="source">Исходный запрос.</param>
            <param name="path">Выражение, описывающее связанные объекты, включаемые в результаты запроса.</param>
            <returns>Новый запрос <see cref="T:System.Linq.IQueryable`1"/> с определенным путем запроса.</returns>
        </member>
        <member name="M:System.RepositoryAndQueryExtensions.ForEach``1(System.Linq.IQueryable{``0},System.Action{``0})">
            <summary>
            Выполняет запрос <paramref name="source"/>, выполняет перечисление всех объектов, полученных в запросе и для каждого вызывает <paramref name="action"/>.
            </summary>
            <returns>Возвращает количество записей, обработанных в перечислении.</returns>
        </member>
        <member name="T:System.Collections.ExpirationDictionaryBase`3">
            <summary>
            Базовый класс для коллекций с истечением срока давности.
            Содержимое таких коллекций очищается автоматически по таймауту.
            </summary>
        </member>
        <member name="M:System.Collections.ExpirationDictionaryBase`3.#ctor(System.TimeSpan)">
            <summary>
            </summary>
            <param name="expirationTimeout">Время, в течении которого должны храниться данные в коллекции.</param>
        </member>
        <member name="T:System.Debug">
            <summary>
            Отладочный вывод и запись в лог.
            </summary>
        </member>
        <member name="M:System.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Запись данных в консоль вывода и в лог-файлы.
            </summary>
        </member>
        <member name="M:System.Debug.WriteLine(System.Object)">
            <summary>
            Запись данных в консоль вывода и в лог-файлы.
            </summary>
        </member>
        <member name="M:System.Debug.WriteLineNoLog(System.String,System.Object[])">
            <summary>
            Запись данных ТОЛЬКО в консоль вывода.
            </summary>
        </member>
        <member name="M:System.Debug.WriteLineNoLog(System.Object)">
            <summary>
            Запись данных ТОЛЬКО в консоль вывода.
            </summary>
        </member>
        <member name="F:System.Debug.DebugSQL">
            <summary>
            Указывает, должны ли выводиться сообщения к SQL-серверу в консоль вывода.
            </summary>
        </member>
        <member name="M:System.Debug.SQLDebug(System.String)">
            <summary>
            Используется для перехвата сообщений к SQL-серверу.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:System.Debug.Logs(System.String,System.Object[])">
            <summary>
            Записывает сообщение <paramref name="message"/>, отформатированное с использованием <see cref="M:System.String.Format(System.String,System.Object[])"/>, в лог-файл.
            Более подробно см. <see cref="M:System.Debug.Logs(System.String)"/>.
            </summary>
        </member>
        <member name="M:System.Debug.Logs(System.String)">
            <summary>
            Записывает сообщение <paramref name="message"/> в лог-файл.
            Имя лог-файла
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:System.Debug.IsDeveloper">
            <summary>
            Это машина разработчика, значит надо менять папку логов на рабочий стол + строку подключения на локальную.
            </summary>
        </member>
        <member name="P:System.Debug.EnableLoggingOnDebugOutput">
            <summary>
            Надо ли записывать в лог при вызове WriteLine.
            </summary>
        </member>
        <member name="P:System.Debug.EnableAdditionalCommonLog">
            <summary>
            Надо ли писать в общий файл _CommonLog.log помимо отдельных лог-файлов
            </summary>
        </member>
        <member name="P:System.Debug.LogsDirectory">
            <summary>
            Путь к папке с логами.
            Базовая папка (содержащая папку "Logs") определяется следующим образом:
            1)  Если это приложение ASP.NET или приложение без точки входа (тоже признак ASP.NET), то используется папка, где расположена данная сборка. 
                Если сборка расположена в папке с именем "bin", то используется уровень выше (т.е. содержащий "bin").
            2)  В остальных случаях используется рабочая папка (<see cref="P:System.Environment.CurrentDirectory"/>).
            </summary>
        </member>
        <member name="T:System.EnumExtension">
            <summary>
            </summary>
        </member>
        <member name="M:System.EnumExtension.DisplayName(System.Enum)">
            <summary>
            Возвращает отображаемое имя для значения типа Enum.
            Если для значения задан атрибут <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, то будет использовано его свойство <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>.
            В противном случае будет возвращено значение value.ToString().
            </summary>
        </member>
        <member name="T:System.ExceptionExtension">
            <summary>
            </summary>
        </member>
        <member name="M:System.ExceptionExtension.ToString(System.Exception,System.Int32)">
            <summary>
            Создает и возвращает строковое представление текущего исключения, при этом выводится только указанное количество фреймов.
            </summary>
            <param name="exception">Текущее исключение.</param>
            <param name="stackLimit">Количество фреймов из стека вызовов, которое необходимо вставить в вывод.</param>
            <returns>Строковое представление текущего исключения.</returns>
        </member>
        <member name="T:System.ExpirationExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:System.ExpirationExtensions.AddWithExpiration``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.TimeSpan)">
            <summary>
            Вызывает <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> с указанием времени <paramref name="expirationTimeout"/>, 
            через которое элемент с ключом <paramref name="key"/> будет удален из коллекции.
            </summary>
        </member>
        <member name="M:System.ExpirationExtensions.GetOrAddWithExpiration``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1,System.TimeSpan)">
            <summary>
            Вызывает <see cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)"/> с указанием времени <paramref name="expirationTimeout"/>, 
            через которое элемент с ключом <paramref name="key"/> будет удален из коллекции.
            </summary>
        </member>
        <member name="M:System.ExpirationExtensions.GetOrAddWithExpiration``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1},System.TimeSpan)">
            <summary>
            Вызывает <see cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)"/> с указанием времени <paramref name="expirationTimeout"/>, 
            через которое элемент с ключом <paramref name="key"/> будет удален из коллекции.
            </summary>
        </member>
        <member name="M:System.ExpirationExtensions.SetWithExpiration``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.TimeSpan)">
            <summary>
            Выполняет присваивание через <see cref="P:System.Collections.Generic.IDictionary`2.Item(`0)"/> с указанием времени <paramref name="expirationTimeout"/>, 
            через которое элемент с ключом <paramref name="key"/> будет удален из коллекции.
            </summary>
        </member>
        <member name="T:System.Extension">
            <summary>
            </summary>
        </member>
        <member name="M:System.Extension.Md5(System.Object)">
            php md5
            
        </member>
        <member name="M:System.Extension.Serialize``1(``0)">
            php Serialize
            
        </member>
        <member name="M:System.Extension.Serialize(System.Object,System.Object)">
            php Serialize
            
        </member>
        <member name="M:System.Extension.Unserialize(System.Object,System.String)">
            php Unserialize
            
        </member>
        <member name="M:System.Extension.Unserialize(System.String)">
            php Unserialize
            
        </member>
        <member name="M:System.Extension.Unserialize``1(System.String)">
            php Unserialize
            
        </member>
        <member name="M:System.Extension.GetLowLevelException(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:System.Extension.In``1(``0,``0[])">
            <summary>
            Проверяет, соответствует ли проверяемый объект списку значений.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Extension.SingleAsEnumerable``1(``0)">
            <summary>
            Возвращает <see cref="T:System.Collections.Generic.IEnumerable`1"/> на основе объекта <paramref name="obj"/>
            </summary>
        </member>
        <member name="T:System.GenericCollectionsExtension">
            <summary>
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Добавляет список объектов <paramref name="items"/> в коллекцию <paramref name="collection"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:System.GenericCollectionsExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Добавляет список объектов <paramref name="items"/> в коллекцию <paramref name="collection"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:System.GenericCollectionsExtension.Merge``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
            <summary>
            Возвращает копию объекта <paramref name="source"/> и добавляет к ней содержимое коллекций, переданных в аргументах.
            Содержимое коллекций добавляется с заменой содержимого при совпадении ключей. Например, если в качестве аргументов передана одна коллекция, содержащая пару 1 : "один" и <paramref name="source"/> содержит пару 1 : "one", то значение "one" будет заменено на "один".
            </summary>
            <param name="source">Исходный объект</param>
            <param name="collectionsToAdd">Коллекции, содержимое которых следует объединить с содержимым <paramref name="source"/>.</param>
        </member>
        <member name="M:System.GenericCollectionsExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Аналог <see cref="M:System.GenericCollectionsExtension.Merge``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])"/>.
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.Merge``2(``0,System.Collections.Generic.IEnumerable{``1}[])">
            <summary>
            Возвращает копию объекта <paramref name="source"/> и добавляет к ней содержимое коллекций, переданных в аргументах.
            </summary>
            <param name="source">Исходный объект</param>
            <param name="collectionsToAdd">Коллекции, содержимое которых следует объединить с содержимым <paramref name="source"/>.</param>
        </member>
        <member name="M:System.GenericCollectionsExtension.Merge``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Аналог <see cref="M:System.GenericCollectionsExtension.Merge``2(``0,System.Collections.Generic.IEnumerable{``1}[])"/>.
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.AddIfNotExists``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Добавляет объекты <paramref name="items"/> в коллекцию <paramref name="collection"/>. Если объекты уже добавлены в коллекцию, то ничего не делает.
            Аналог конструкции if (!collection.Contains(item)) collection.Add(item);
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Возвращает значение из словаря <paramref name="dictionary"/> по ключу <paramref name="key"/>. Если такой ключ отсутствует, то вернет значение <paramref name="defaultValue"/>.
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Возвращает значение из словаря <paramref name="dictionary"/> по ключу <paramref name="key"/>. Если такой ключ отсутствует, то вернет значение, полученное вызовом <paramref name="defaultValueProvider"/>.
            </summary>
        </member>
        <member name="M:System.GenericCollectionsExtension.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Возвращает значение из словаря <paramref name="dictionary"/> по ключу <paramref name="key"/>. 
            Если такой ключ отсутствует, то вернет значение, полученное вызовом <paramref name="defaultValueProvider"/>.
            В <paramref name="defaultValueProvider"/> передается ключ <paramref name="key"/> и дополнительная информация <paramref name="createNewInfo"/>.
            </summary>
        </member>
        <member name="T:System.NameValueCollectionExtension">
            <summary>
            </summary>
        </member>
        <member name="M:System.NameValueCollectionExtension.HasKey(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Проверяет, существует ли указанный ключ в коллекции.
            </summary>
            <param name="collection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.NameValueCollectionExtension.TryGetValue``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Пытается десериализовать указанный ключ <paramref name="key"/> в коллекции в указанный тип <typeparamref name="T"/>.
            </summary>
            <returns>
            В случае успеха возвращает объект типа <typeparamref name="T"/>. 
            В противном случае возвращает значение по-умолчанию для <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:System.NameValueCollectionExtension.SetValues(System.Collections.Specialized.NameValueCollection,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Устанавливает новые значения <paramref name="values"/> для указаного ключа <paramref name="key"/> в коллекцию <paramref name="collection"/>.
            Все старые значения очищаются.
            </summary>
        </member>
        <member name="M:System.NameValueCollectionExtension.SetValues(System.Collections.Specialized.NameValueCollection,System.String,System.String[])">
            <summary>
            Устанавливает новые значения <paramref name="values"/> для указаного ключа <paramref name="key"/> в коллекцию <paramref name="collection"/>.
            Все старые значения очищаются.
            </summary>
        </member>
        <member name="T:System.LazyWithoutExceptionCaching`1">
            <summary>
            Аналог <see cref="T:System.Lazy`1"/> без кеширования исключений, могущих возникнуть во время создания значения.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.LazyWithoutExceptionCaching`1.#ctor(System.Func{`0})">
            <summary>
            </summary>
        </member>
        <member name="P:System.LazyWithoutExceptionCaching`1.Value">
            <summary>
            См. <see cref="P:System.Lazy`1.Value"/> 
            </summary>
        </member>
        <member name="P:System.LazyWithoutExceptionCaching`1.IsValueCreated">
            <summary>
            См. <see cref="P:System.Lazy`1.IsValueCreated"/> 
            </summary>
        </member>
        <member name="T:System.MeasureTime">
            <summary>
            Класс для измерения промежутков времени. Удобен для измерения производительности.
            </summary>
        </member>
        <member name="M:System.MeasureTime.#ctor">
            <summary>
            Автоматически вызывает <see cref="M:System.MeasureTime.Start"/>.
            </summary>
        </member>
        <member name="M:System.MeasureTime.Start">
            <summary>
            Начинает новое измерение. Вызывается автоматически при создании нового экземпляра <see cref="T:System.MeasureTime"/>.
            </summary>
        </member>
        <member name="M:System.MeasureTime.Calculate(System.Boolean)">
            <summary>
            Возвращает время с последнего вызова <see cref="M:System.MeasureTime.Start"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.MeasureTime.StartTime">
            <summary>
            Дата начала измерения. Новое измерение можно начать с помощью вызова <see cref="M:System.MeasureTime.Start"/>.
            </summary>
        </member>
        <member name="M:System.MeasureTime.ToString">
            <summary>
            Автоматически вызывает <see cref="M:System.MeasureTime.Calculate(System.Boolean)"/> и выводит результат измерения в виде <see cref="P:System.TimeSpan.TotalMilliseconds"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.BaseRange`1">
            <summary>
            Представляет диапазон значений.
            Значения автоматически выравниваются - если <see cref="P:System.BaseRange`1.End"/>  меньше, чем <see cref="P:System.BaseRange`1.Start"/>, то в качестве начала диапазона будет использован <see cref="P:System.BaseRange`1.End"/>, а в качестве конца диапазона - <see cref="P:System.BaseRange`1.Start"/>.
            </summary>
        </member>
        <member name="M:System.BaseRange`1.#ctor(System.String,System.String,System.Collections.Generic.IComparer{`0})">
            <summary>
            Возвращает новый объект на основе текстового значения диапазона.
            </summary>
        </member>
        <member name="M:System.BaseRange`1.#ctor(`0,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Возвращает новый объект на основе начала диапазона <paramref name="start"/> и конца диапазона <paramref name="end"/>.
            </summary>
        </member>
        <member name="M:System.BaseRange`1.Normalize">
            <summary>
            Нормализация значений диапазона.
            </summary>
        </member>
        <member name="M:System.BaseRange`1.ParseFromString(System.String,System.String)">
            <summary>
            Загружает значения диапазона из строки. 
            </summary>
            <param name="sourceValue"></param>
            <param name="separator"></param>
        </member>
        <member name="M:System.BaseRange`1.Includes(`0)">
            <summary>
            Проверяет, входит ли указанное значение <paramref name="value"/> в текущий диапазон.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseRange`1.Includes(System.IRange{`0})">
            <summary>
            Проверяет, входит ли указанный диапазон <paramref name="range"/> в текущий диапазон.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:System.BaseRange`1.Convert(System.String)">
            <summary>
            Преобразует строковое значение в <typeparamref name="TValue"/>. В случае ошибки генерируется исключение.
            </summary>
            <param name="source">Исходное значение.</param>
            <returns>Преобразованное значение.</returns>
        </member>
        <member name="M:System.BaseRange`1.TryConvert(System.String,`0@)">
            <summary>
            Пытается преобразовать строковое значение в <typeparamref name="TValue"/>. В случае ошибки возвращает false.
            </summary>
            <param name="source">Исходное значение.</param>
            <param name="value">Результат преобразования.</param>
            <returns>Статус операции.</returns>
        </member>
        <member name="P:System.BaseRange`1.Start">
            <summary>
            Начало диапазона.
            </summary>
        </member>
        <member name="P:System.BaseRange`1.End">
            <summary>
            Конец диапазона.
            </summary>
        </member>
        <member name="M:System.BaseRange`1.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.DecimalRange">
            <summary>
            Представляет диапазон чисел.
            </summary>
        </member>
        <member name="M:System.DecimalRange.#ctor(System.Decimal,System.Decimal)">
            <summary>
            </summary>
        </member>
        <member name="M:System.DecimalRange.#ctor(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.DecimalRange.Convert(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.DecimalRange.TryConvert(System.String,System.Decimal@)">
            <summary>
            </summary>
        </member>
        <member name="T:System.DateRange">
            <summary>
            Представляет диапазон дат с начальной и конечной датой.
            </summary>
        </member>
        <member name="M:System.DateRange.FromDates(System.DateTime,System.DateTime)">
            <summary>
            Возвращает новый объект <see cref="T:System.DateRange"/> на основе начала периода <paramref name="start"/> и конца периода <paramref name="end"/>.
            </summary>
        </member>
        <member name="M:System.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Возвращает новый объект <see cref="T:System.DateRange"/> на основе начала периода <paramref name="start"/> и конца периода <paramref name="end"/>.
            Значения автоматически выравниваются - если <paramref name="end"/> меньше, чем <paramref name="start"/>, то в качестве начала периода будет использован <paramref name="end"/>, а в качестве конца периода - <paramref name="start"/>.
            </summary>
        </member>
        <member name="M:System.DateRange.Includes(System.DateTime)">
            <summary>
            Проверяет, входит ли указанная дата <paramref name="value"/> в текущий диапазон.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateRange.Includes(System.IRange{System.DateTime})">
            <summary>
            Проверяет, входит ли указанный диапазон дат <paramref name="range"/> в текущий диапазон.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:System.DateRange.Start">
            <summary>
            Дата начала периода.
            </summary>
        </member>
        <member name="P:System.DateRange.End">
            <summary>
            Дата конца периода.
            </summary>
        </member>
        <member name="M:System.DateRange.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:System.IRange`1">
            <summary>
            Описывает объект, представляющий диапазон значений типа <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.IRange`1.Start">
            <summary>
            Начальное (минимальное, стартовое) значение.
            </summary>
        </member>
        <member name="P:System.IRange`1.End">
            <summary>
            Конечное (последнее, максимальное) значение.
            </summary>
        </member>
        <member name="M:System.IRange`1.Includes(`0)">
            <summary>
            Проверяет, входит ли значение <paramref name="value"/> в диапазон.
            </summary>
        </member>
        <member name="M:System.IRange`1.Includes(System.IRange{`0})">
            <summary>
            Проверяет, входит ли диапазон <paramref name="range"/> в диапазон.
            </summary>
        </member>
        <member name="T:ItemBaseExtension">
            <summary>
            </summary>
        </member>
        <member name="M:ItemBaseExtension.ToDictionaryBase(System.Collections.Generic.IEnumerable{TraceCore.Items.IItemBase})">
            <summary>
            Возвращает коллекцию int:string для списка элементов <see cref="T:TraceCore.Items.IItemBase"/> на основе свойств <see cref="P:TraceCore.Items.IItemBase.ID"/> и <see cref="P:TraceCore.Items.IItemBase.Caption"/>.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:TypesExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:TypesExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Возвращает true, если тип <paramref name="givenType"/> является наследником generic-типа <paramref name="genericType"/>.
            </summary>
        </member>
        <member name="M:TypesExtensions.GetBaseTypes(System.Type)">
            <summary>
            Возвращает список всех базовых типов в цепочке наследования типа <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:ModuleInitializer">
            <summary>
            Used by the ModuleInit. All code inside the Initialize method is ran as soon as the assembly is loaded.
            </summary>
        </member>
        <member name="M:ModuleInitializer.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:DateExtension">
            <summary>
            </summary>
        </member>
        <member name="M:DateExtension.Timestamp(System.DateTime)">
            <summary>
            Аналог php timestamp. Количество секунд с 1 января 1970 года.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DateExtension.Microtime(System.DateTime)">
            <summary>
            Аналог php microtime. Количество секунд с дробной частью в микросекундах с 1 января 1970 года.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DateExtension.FromUnixtime(System.DateTime,System.Double)">
            <summary>
            Возвращает дату и время на основе php timestamp. См. <see cref="M:DateExtension.Timestamp(System.DateTime)"/>.
            </summary>
            <param name="date"></param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:DateExtension.FromTimestamp(System.Int32)">
            <summary>
            Возвращает дату и время на основе php timestamp. См. <see cref="M:DateExtension.Timestamp(System.DateTime)"/>.
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:DateExtension.GetWeekOfYear(System.DateTime)">
            <summary>
            Возвращает номер недели в году на основе даты. Используется текущий формат даты и времени.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:EnumerableExtension">
            <summary>
            </summary>
        </member>
        <member name="M:EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Выполняет указанное действие <paramref name="action"/> с каждым элементом перечисления <paramref name="source"/>.
            </summary>
            <returns>Возвращает количество элементов, обработанных в перечислении.</returns>
        </member>
        <member name="T:IsNullOrEmptyExtension">
            <summary>
            </summary>
        </member>
        <member name="M:IsNullOrEmptyExtension.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Указывает, является ли указанное перечисление пустым или равным null.
            </summary>
        </member>
        <member name="M:IsNullOrEmptyExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Указывает, является ли указанное перечисление пустым или равным null.
            </summary>
        </member>
        <member name="T:ObjectClonable">
            <summary>
            </summary>
        </member>
        <member name="M:ObjectClonable.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:StringExtension">
            <summary>
            </summary>
        </member>
        <member name="M:StringExtension.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Возвращает часть строки <paramref name="str"/>, начиная с указанной позиции <paramref name="start"/> длиной НЕ БОЛЕЕ <paramref name="limit"/>.
            Оличается от <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> тем, что позволяет указать произвольный <paramref name="limit"/>. 
            Если длина строки меньше, чем <paramref name="start"/> + <paramref name="limit"/>, будет возвращена только имеющаяся часть. <see cref="M:System.String.Substring(System.Int32,System.Int32)"/> же в этом случае сгенерирует исключение.
            Если <paramref name="suffix"/> задан и возвращаемая строка была обрезана, то <paramref name="suffix"/> добавляется в конец новой строки.
            </summary>
        </member>
        <member name="M:StringExtension.Replace(System.String,System.Char[],System.Char[])">
            <summary>
            Возвращает новую строку, в которой все вхождения заданных знаков Юникода <paramref name="search"/> заменены другими заданными знаками Юникода <paramref name="replace"/>.
            Если <paramref name="replace"/> не задан или его длина меньше, чем длина <paramref name="search"/>, то все вхождения из <paramref name="search"/>, для которых не было найдено соответствий в <paramref name="replace"/>, будут заменены на пустой знак.
            </summary>
        </member>
        <member name="M:StringExtension.Replace(System.String,System.String[],System.String[])">
            <summary>
            Возвращает новую строку, в которой все вхождения заданных строк <paramref name="search"/> заменены другими заданными строками <paramref name="replace"/>.
            Если <paramref name="replace"/> не задан или его длина меньше, чем длина <paramref name="search"/>, то все вхождения из <paramref name="search"/>, для которых не было найдено соответствий в <paramref name="replace"/>, будут заменены на пустую строку.
            </summary>
        </member>
        <member name="T:Conversive.PHPSerializationLibrary.Serializer">
            <summary>
            Serializer Class.
            </summary>
        </member>
    </members>
</doc>
